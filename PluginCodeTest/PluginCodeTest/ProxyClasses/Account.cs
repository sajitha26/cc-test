// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace PluginCodeTest.ProxyClasses
{
    [EntityLogicalNameAttribute("account")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class Account : BaseProxyClass
    {
        public new const string LogicalName = "account";
        public const int ObjectTypeCode = 1;
        public const string PrimaryIdAttribute = "accountid";
        public const string PrimaryNameAttribute = "name";
        public const string PrimaryImageAttribute = "entityimage";
        static Account()
        {
            BaseProxyClass.RegisterProxyType(typeof(Account), "account");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Account() : base(new Entity("account")) { }
        public Account(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Account>(); }

        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }

        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }

        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }

        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }

        private static Dictionary<string, eNumberOptions> _numberOptions;

        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }
        /// <summary>
        /// <para>Logical Name: sbt_abn</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_abn")]
        public string ABN
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_abn");
            }
            set
            {
                this.SetPropertyValue("sbt_abn", value, 100, "ABN");
            }
        }

        /// <summary>
        /// <para>Key Property (Uniqueidentifier)</para>
        /// <para>Logical Name: accountid</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public Guid AccountId2
        {
            get
            {
                return base.Id;
            }
            set
            {
                base.Id = value;
                base.SetPropertyValue("accountid", value, "AccountId2");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_externalid</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_externalid")]
        public string AccountId
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_externalid");
            }
            set
            {
                this.SetPropertyValue("sbt_externalid", value, 100, "AccountId");
            }
        }

        /// <summary>
        /// <para>Logical Name: name</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string AccountName
        {
            get
            {
                return this.GetPropertyValue<string>("name");
            }
            set
            {
                this.SetPropertyValue("name", value, 160, "AccountName");
            }
        }

        /// <summary>
        /// Logical Name: accountratingcode
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public eAccount_AccountRating? AccountRating
        {
            get
            {
                if (AccountRating_OptionSetValue != null) { return (eAccount_AccountRating)AccountRating_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.AccountRating_OptionSetValue = new OptionSetValue((int)value); }
                else this.AccountRating_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountratingcode</para>
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public OptionSetValue AccountRating_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountratingcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountratingcode", value, "AccountRating_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string AccountRating_Text(IOrganizationService service)
        {
            return this.AccountRating_OptionSetValue.GetOptionSetText(service, this, "accountratingcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string AccountRating_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.AccountRating_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: sbt_accountstatus
        /// </summary>
        [AttributeLogicalName("sbt_accountstatus")]
        public eAccount_AccountStatus? AccountStatus
        {
            get
            {
                if (AccountStatus_OptionSetValue != null) { return (eAccount_AccountStatus)AccountStatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.AccountStatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.AccountStatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_accountstatus</para>
        /// </summary>
        [AttributeLogicalName("sbt_accountstatus")]
        public OptionSetValue AccountStatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_accountstatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_accountstatus", value, "AccountStatus_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string AccountStatus_Text(IOrganizationService service)
        {
            return this.AccountStatus_OptionSetValue.GetOptionSetText(service, this, "sbt_accountstatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string AccountStatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.AccountStatus_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: sbt_accounttype
        /// </summary>
        [AttributeLogicalName("sbt_accounttype")]
        public eAccount_AccountType? AccountType
        {
            get
            {
                if (AccountType_OptionSetValue != null) { return (eAccount_AccountType)AccountType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.AccountType_OptionSetValue = new OptionSetValue((int)value); }
                else this.AccountType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_accounttype</para>
        /// </summary>
        [AttributeLogicalName("sbt_accounttype")]
        public OptionSetValue AccountType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_accounttype");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_accounttype", value, "AccountType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string AccountType_Text(IOrganizationService service)
        {
            return this.AccountType_OptionSetValue.GetOptionSetText(service, this, "sbt_accounttype");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string AccountType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.AccountType_OptionSetValue.Value);
        }




        /// <summary>
        /// <para>Logical Name: ops_accountspayableemail</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("ops_accountspayableemail")]
        public string AccountsPayableEmail
        {
            get
            {
                return this.GetPropertyValue<string>("ops_accountspayableemail");
            }
            set
            {
                this.SetPropertyValue("ops_accountspayableemail", value, 100, "AccountsPayableEmail");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_accountspayableemail2</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_accountspayableemail2")]
        public string AccountsPayableEmail2
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_accountspayableemail2");
            }
            set
            {
                this.SetPropertyValue("sbt_accountspayableemail2", value, 100, "AccountsPayableEmail2");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_accountspayableemail3</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_accountspayableemail3")]
        public string AccountsPayableEmail3
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_accountspayableemail3");
            }
            set
            {
                this.SetPropertyValue("sbt_accountspayableemail3", value, 100, "AccountsPayableEmail3");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_accountspayableemail4</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_accountspayableemail4")]
        public string AccountsPayableEmail4
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_accountspayableemail4");
            }
            set
            {
                this.SetPropertyValue("sbt_accountspayableemail4", value, 100, "AccountsPayableEmail4");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_acn</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_acn")]
        public string ACN
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_acn");
            }
            set
            {
                this.SetPropertyValue("sbt_acn", value, 100, "ACN");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_activatedsimsactual</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("sbt_activatedsimsactual")]
        public int? ActivatedSimsActual
        {
            get
            {
                return this.GetPropertyValue<int?>("sbt_activatedsimsactual");
            }
            set
            {
                this.SetPropertyValue("sbt_activatedsimsactual", (int?)value, (int)-2147483648, (int)2147483647, "ActivatedSimsActual");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_projectedsims</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("sbt_projectedsims")]
        public int? ActivatedSIMsCommitment
        {
            get
            {
                return this.GetPropertyValue<int?>("sbt_projectedsims");
            }
            set
            {
                this.SetPropertyValue("sbt_projectedsims", (int?)value, (int)-2147483648, (int)2147483647, "ActivatedSIMsCommitment");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_composite</para>
        /// <para>Max Length: 1000 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1
        {
            get
            {
                return this.GetPropertyValue<string>("address1_composite");
            }
        }

        /// <summary>
        /// Logical Name: address1_addresstypecode
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public eAccount_Address1_AddressType? Address1_AddressType
        {
            get
            {
                if (Address1_AddressType_OptionSetValue != null) { return (eAccount_Address1_AddressType)Address1_AddressType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address1_AddressType_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address1_AddressType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_addresstypecode</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public OptionSetValue Address1_AddressType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_addresstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_addresstypecode", value, "Address1_AddressType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address1_AddressType_Text(IOrganizationService service)
        {
            return this.Address1_AddressType_OptionSetValue.GetOptionSetText(service, this, "address1_addresstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address1_AddressType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address1_AddressType_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address1_city</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City
        {
            get
            {
                return this.GetPropertyValue<string>("address1_city");
            }
            set
            {
                this.SetPropertyValue("address1_city", value, 80, "Address1_City");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_country</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country_Region
        {
            get
            {
                return this.GetPropertyValue<string>("address1_country");
            }
            set
            {
                this.SetPropertyValue("address1_country", value, 80, "Address1_Country_Region");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_county</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County
        {
            get
            {
                return this.GetPropertyValue<string>("address1_county");
            }
            set
            {
                this.SetPropertyValue("address1_county", value, 50, "Address1_County");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax
        {
            get
            {
                return this.GetPropertyValue<string>("address1_fax");
            }
            set
            {
                this.SetPropertyValue("address1_fax", value, 50, "Address1_Fax");
            }
        }

        /// <summary>
        /// Logical Name: address1_freighttermscode
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public eAccount_Address1_FreightTerms? Address1_FreightTerms
        {
            get
            {
                if (Address1_FreightTerms_OptionSetValue != null) { return (eAccount_Address1_FreightTerms)Address1_FreightTerms_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address1_FreightTerms_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address1_FreightTerms_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_freighttermscode</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public OptionSetValue Address1_FreightTerms_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_freighttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_freighttermscode", value, "Address1_FreightTerms_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address1_FreightTerms_Text(IOrganizationService service)
        {
            return this.Address1_FreightTerms_OptionSetValue.GetOptionSetText(service, this, "address1_freighttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address1_FreightTerms_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address1_FreightTerms_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address1_addressid</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid Address1_ID
        {
            get
            {
                return this.GetPropertyValue<Guid>("address1_addressid");
            }
            set
            {
                this.SetPropertyValue<Guid>("address1_addressid", value, "Address1_ID");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_latitude</para>
        /// <para>Minimum Value: -90</para>
        /// <para>Maximum Value: 90</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address1_latitude");
            }
            set
            {
                this.SetPropertyValue("address1_latitude", (double?)value, (double)-90, (double)90, "Address1_Latitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_longitude</para>
        /// <para>Minimum Value: -180</para>
        /// <para>Maximum Value: 180</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address1_longitude");
            }
            set
            {
                this.SetPropertyValue("address1_longitude", (double?)value, (double)-180, (double)180, "Address1_Longitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_name</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name
        {
            get
            {
                return this.GetPropertyValue<string>("address1_name");
            }
            set
            {
                this.SetPropertyValue("address1_name", value, 200, "Address1_Name");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_postofficebox</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox
        {
            get
            {
                return this.GetPropertyValue<string>("address1_postofficebox");
            }
            set
            {
                this.SetPropertyValue("address1_postofficebox", value, 20, "Address1_PostOfficeBox");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_primarycontactname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName
        {
            get
            {
                return this.GetPropertyValue<string>("address1_primarycontactname");
            }
            set
            {
                this.SetPropertyValue("address1_primarycontactname", value, 100, "Address1_PrimaryContactName");
            }
        }

        /// <summary>
        /// Logical Name: address1_shippingmethodcode
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public eAccount_Address1_ShippingMethod? Address1_ShippingMethod
        {
            get
            {
                if (Address1_ShippingMethod_OptionSetValue != null) { return (eAccount_Address1_ShippingMethod)Address1_ShippingMethod_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address1_ShippingMethod_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address1_ShippingMethod_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public OptionSetValue Address1_ShippingMethod_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_shippingmethodcode", value, "Address1_ShippingMethod_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address1_ShippingMethod_Text(IOrganizationService service)
        {
            return this.Address1_ShippingMethod_OptionSetValue.GetOptionSetText(service, this, "address1_shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address1_ShippingMethod_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address1_ShippingMethod_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address1_stateorprovince</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_State_Province
        {
            get
            {
                return this.GetPropertyValue<string>("address1_stateorprovince");
            }
            set
            {
                this.SetPropertyValue("address1_stateorprovince", value, 50, "Address1_State_Province");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line1</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Street1
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line1");
            }
            set
            {
                this.SetPropertyValue("address1_line1", value, 250, "Address1_Street1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line2</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Street2
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line2");
            }
            set
            {
                this.SetPropertyValue("address1_line2", value, 250, "Address1_Street2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line3</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Street3
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line3");
            }
            set
            {
                this.SetPropertyValue("address1_line3", value, 250, "Address1_Street3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone2");
            }
            set
            {
                this.SetPropertyValue("address1_telephone2", value, 50, "Address1_Telephone2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone3");
            }
            set
            {
                this.SetPropertyValue("address1_telephone3", value, 50, "Address1_Telephone3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_upszone</para>
        /// <para>Max Length: 4 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone
        {
            get
            {
                return this.GetPropertyValue<string>("address1_upszone");
            }
            set
            {
                this.SetPropertyValue("address1_upszone", value, 4, "Address1_UPSZone");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_utcoffset</para>
        /// <para>Minimum Value: -1500</para>
        /// <para>Maximum Value: 1500</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset
        {
            get
            {
                return this.GetPropertyValue<int?>("address1_utcoffset");
            }
            set
            {
                this.SetPropertyValue("address1_utcoffset", (int?)value, (int)-1500, (int)1500, "Address1_UTCOffset");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_postalcode</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_ZIP_PostalCode
        {
            get
            {
                return this.GetPropertyValue<string>("address1_postalcode");
            }
            set
            {
                this.SetPropertyValue("address1_postalcode", value, 20, "Address1_ZIP_PostalCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_composite</para>
        /// <para>Max Length: 1000 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2
        {
            get
            {
                return this.GetPropertyValue<string>("address2_composite");
            }
        }

        /// <summary>
        /// Logical Name: address2_addresstypecode
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public eAccount_Address2_AddressType? Address2_AddressType
        {
            get
            {
                if (Address2_AddressType_OptionSetValue != null) { return (eAccount_Address2_AddressType)Address2_AddressType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address2_AddressType_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address2_AddressType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_addresstypecode</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public OptionSetValue Address2_AddressType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_addresstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_addresstypecode", value, "Address2_AddressType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address2_AddressType_Text(IOrganizationService service)
        {
            return this.Address2_AddressType_OptionSetValue.GetOptionSetText(service, this, "address2_addresstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address2_AddressType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address2_AddressType_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address2_city</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City
        {
            get
            {
                return this.GetPropertyValue<string>("address2_city");
            }
            set
            {
                this.SetPropertyValue("address2_city", value, 80, "Address2_City");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_country</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country_Region
        {
            get
            {
                return this.GetPropertyValue<string>("address2_country");
            }
            set
            {
                this.SetPropertyValue("address2_country", value, 80, "Address2_Country_Region");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_county</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County
        {
            get
            {
                return this.GetPropertyValue<string>("address2_county");
            }
            set
            {
                this.SetPropertyValue("address2_county", value, 50, "Address2_County");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax
        {
            get
            {
                return this.GetPropertyValue<string>("address2_fax");
            }
            set
            {
                this.SetPropertyValue("address2_fax", value, 50, "Address2_Fax");
            }
        }

        /// <summary>
        /// Logical Name: address2_freighttermscode
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public eAccount_Address2_FreightTerms? Address2_FreightTerms
        {
            get
            {
                if (Address2_FreightTerms_OptionSetValue != null) { return (eAccount_Address2_FreightTerms)Address2_FreightTerms_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address2_FreightTerms_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address2_FreightTerms_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_freighttermscode</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public OptionSetValue Address2_FreightTerms_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_freighttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_freighttermscode", value, "Address2_FreightTerms_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address2_FreightTerms_Text(IOrganizationService service)
        {
            return this.Address2_FreightTerms_OptionSetValue.GetOptionSetText(service, this, "address2_freighttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address2_FreightTerms_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address2_FreightTerms_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address2_addressid</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid Address2_ID
        {
            get
            {
                return this.GetPropertyValue<Guid>("address2_addressid");
            }
            set
            {
                this.SetPropertyValue<Guid>("address2_addressid", value, "Address2_ID");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_latitude</para>
        /// <para>Minimum Value: -90</para>
        /// <para>Maximum Value: 90</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address2_latitude");
            }
            set
            {
                this.SetPropertyValue("address2_latitude", (double?)value, (double)-90, (double)90, "Address2_Latitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_longitude</para>
        /// <para>Minimum Value: -180</para>
        /// <para>Maximum Value: 180</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address2_longitude");
            }
            set
            {
                this.SetPropertyValue("address2_longitude", (double?)value, (double)-180, (double)180, "Address2_Longitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_name</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name
        {
            get
            {
                return this.GetPropertyValue<string>("address2_name");
            }
            set
            {
                this.SetPropertyValue("address2_name", value, 200, "Address2_Name");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_postofficebox</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox
        {
            get
            {
                return this.GetPropertyValue<string>("address2_postofficebox");
            }
            set
            {
                this.SetPropertyValue("address2_postofficebox", value, 20, "Address2_PostOfficeBox");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_primarycontactname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName
        {
            get
            {
                return this.GetPropertyValue<string>("address2_primarycontactname");
            }
            set
            {
                this.SetPropertyValue("address2_primarycontactname", value, 100, "Address2_PrimaryContactName");
            }
        }

        /// <summary>
        /// Logical Name: address2_shippingmethodcode
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public eAccount_Address2_ShippingMethod? Address2_ShippingMethod
        {
            get
            {
                if (Address2_ShippingMethod_OptionSetValue != null) { return (eAccount_Address2_ShippingMethod)Address2_ShippingMethod_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Address2_ShippingMethod_OptionSetValue = new OptionSetValue((int)value); }
                else this.Address2_ShippingMethod_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public OptionSetValue Address2_ShippingMethod_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_shippingmethodcode", value, "Address2_ShippingMethod_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Address2_ShippingMethod_Text(IOrganizationService service)
        {
            return this.Address2_ShippingMethod_OptionSetValue.GetOptionSetText(service, this, "address2_shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Address2_ShippingMethod_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Address2_ShippingMethod_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: address2_stateorprovince</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_State_Province
        {
            get
            {
                return this.GetPropertyValue<string>("address2_stateorprovince");
            }
            set
            {
                this.SetPropertyValue("address2_stateorprovince", value, 50, "Address2_State_Province");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line1</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Street1
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line1");
            }
            set
            {
                this.SetPropertyValue("address2_line1", value, 250, "Address2_Street1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line2</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Street2
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line2");
            }
            set
            {
                this.SetPropertyValue("address2_line2", value, 250, "Address2_Street2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line3</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Street3
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line3");
            }
            set
            {
                this.SetPropertyValue("address2_line3", value, 250, "Address2_Street3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone1");
            }
            set
            {
                this.SetPropertyValue("address2_telephone1", value, 50, "Address2_Telephone1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone2");
            }
            set
            {
                this.SetPropertyValue("address2_telephone2", value, 50, "Address2_Telephone2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone3");
            }
            set
            {
                this.SetPropertyValue("address2_telephone3", value, 50, "Address2_Telephone3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_upszone</para>
        /// <para>Max Length: 4 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone
        {
            get
            {
                return this.GetPropertyValue<string>("address2_upszone");
            }
            set
            {
                this.SetPropertyValue("address2_upszone", value, 4, "Address2_UPSZone");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_utcoffset</para>
        /// <para>Minimum Value: -1500</para>
        /// <para>Maximum Value: 1500</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset
        {
            get
            {
                return this.GetPropertyValue<int?>("address2_utcoffset");
            }
            set
            {
                this.SetPropertyValue("address2_utcoffset", (int?)value, (int)-1500, (int)1500, "Address2_UTCOffset");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_postalcode</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_ZIP_PostalCode
        {
            get
            {
                return this.GetPropertyValue<string>("address2_postalcode");
            }
            set
            {
                this.SetPropertyValue("address2_postalcode", value, 20, "Address2_ZIP_PostalCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string AddressPhone
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone1");
            }
            set
            {
                this.SetPropertyValue("address1_telephone1", value, 50, "AddressPhone");
            }
        }







        /// <summary>
        /// <para>Logical Name: aging30</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? Aging30
        {
            get
            {
                if (Aging30Money != null) { return Aging30Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging30</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public Money Aging30Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging30");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging30_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? Aging30_Base
        {
            get
            {
                if (Aging30_BaseMoney != null) { return Aging30_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging30_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public Money Aging30_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging30_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging60</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? Aging60
        {
            get
            {
                if (Aging60Money != null) { return Aging60Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging60</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public Money Aging60Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging60");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging60_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? Aging60_Base
        {
            get
            {
                if (Aging60_BaseMoney != null) { return Aging60_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging60_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public Money Aging60_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging60_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging90</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? Aging90
        {
            get
            {
                if (Aging90Money != null) { return Aging90Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging90</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public Money Aging90Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging90");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging90_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? Aging90_Base
        {
            get
            {
                if (Aging90_BaseMoney != null) { return Aging90_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging90_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public Money Aging90_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging90_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: revenue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? AnnualRevenue
        {
            get
            {
                if (AnnualRevenueMoney != null) { return AnnualRevenueMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.AnnualRevenueMoney = new Money(value.Value); }
                else this.AnnualRevenueMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: revenue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public Money AnnualRevenueMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("revenue");
            }
            set
            {
                this.SetPropertyValue("revenue", (Money)value, (decimal)0, (decimal)100000000000000, "AnnualRevenueMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: revenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? AnnualRevenue_Base
        {
            get
            {
                if (AnnualRevenue_BaseMoney != null) { return AnnualRevenue_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: revenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public Money AnnualRevenue_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("revenue_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_ss_api</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_ss_api")]
        public bool? API
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_ss_api");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_ss_api", value, "API");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_apn</para>
        /// <para>Max Length: 400 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_apn")]
        public string APN
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_apn");
            }
            set
            {
                this.SetPropertyValue("sbt_apn", value, 400, "APN");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_applygst</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_applygst")]
        public bool? ApplyGST
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_applygst");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_applygst", value, "ApplyGST");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_autosend</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_autosend")]
        public bool? AutoSend
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_autosend");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_autosend", value, "AutoSend");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_balanceoverdue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_balanceoverdue")]
        public decimal? BalanceOverdue
        {
            get
            {
                if (BalanceOverdueMoney != null) { return BalanceOverdueMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.BalanceOverdueMoney = new Money(value.Value); }
                else this.BalanceOverdueMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_balanceoverdue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_balanceoverdue")]
        public Money BalanceOverdueMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_balanceoverdue");
            }
            set
            {
                this.SetPropertyValue("sbt_balanceoverdue", (Money)value, (decimal)0, (decimal)1000000000, "BalanceOverdueMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_balanceoverdue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_balanceoverdue_base")]
        public decimal? BalanceOverdue_Base
        {
            get
            {
                if (BalanceOverdue_BaseMoney != null) { return BalanceOverdue_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_balanceoverdue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_balanceoverdue_base")]
        public Money BalanceOverdue_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_balanceoverdue_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_billingenable</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_billingenable")]
        public bool? BillingEnable
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_billingenable");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_billingenable", value, "BillingEnable");
            }
        }

        /// <summary>
        /// Logical Name: businesstypecode
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public eAccount_BusinessType? BusinessType
        {
            get
            {
                if (BusinessType_OptionSetValue != null) { return (eAccount_BusinessType)BusinessType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.BusinessType_OptionSetValue = new OptionSetValue((int)value); }
                else this.BusinessType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: businesstypecode</para>
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public OptionSetValue BusinessType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("businesstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("businesstypecode", value, "BusinessType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string BusinessType_Text(IOrganizationService service)
        {
            return this.BusinessType_OptionSetValue.GetOptionSetText(service, this, "businesstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string BusinessType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.BusinessType_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: sbt_catchallenable</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_catchallenable")]
        public bool? CatchAllTariffEnable
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_catchallenable");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_catchallenable", value, "CatchAllTariffEnable");
            }
        }

        /// <summary>
        /// Logical Name: accountcategorycode
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public eAccount_Category? Category
        {
            get
            {
                if (Category_OptionSetValue != null) { return (eAccount_Category)Category_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Category_OptionSetValue = new OptionSetValue((int)value); }
                else this.Category_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountcategorycode</para>
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public OptionSetValue Category_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountcategorycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountcategorycode", value, "Category_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Category_Text(IOrganizationService service)
        {
            return this.Category_OptionSetValue.GetOptionSetText(service, this, "accountcategorycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Category_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Category_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: sbt_chargetype
        /// </summary>
        [AttributeLogicalName("sbt_chargetype")]
        public eAccount_ChargeType? ChargeType
        {
            get
            {
                if (ChargeType_OptionSetValue != null) { return (eAccount_ChargeType)ChargeType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ChargeType_OptionSetValue = new OptionSetValue((int)value); }
                else this.ChargeType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_chargetype</para>
        /// </summary>
        [AttributeLogicalName("sbt_chargetype")]
        public OptionSetValue ChargeType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_chargetype");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_chargetype", value, "ChargeType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string ChargeType_Text(IOrganizationService service)
        {
            return this.ChargeType_OptionSetValue.GetOptionSetText(service, this, "sbt_chargetype");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ChargeType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ChargeType_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: accountclassificationcode
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public eAccount_Classification? Classification
        {
            get
            {
                if (Classification_OptionSetValue != null) { return (eAccount_Classification)Classification_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Classification_OptionSetValue = new OptionSetValue((int)value); }
                else this.Classification_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountclassificationcode</para>
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public OptionSetValue Classification_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountclassificationcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountclassificationcode", value, "Classification_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Classification_Text(IOrganizationService service)
        {
            return this.Classification_OptionSetValue.GetOptionSetText(service, this, "accountclassificationcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Classification_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Classification_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: sbt_companysize
        /// </summary>
        [AttributeLogicalName("sbt_companysize")]
        public eAccount_CompanySize? CompanySize
        {
            get
            {
                if (CompanySize_OptionSetValue != null) { return (eAccount_CompanySize)CompanySize_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CompanySize_OptionSetValue = new OptionSetValue((int)value); }
                else this.CompanySize_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_companysize</para>
        /// </summary>
        [AttributeLogicalName("sbt_companysize")]
        public OptionSetValue CompanySize_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_companysize");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_companysize", value, "CompanySize_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string CompanySize_Text(IOrganizationService service)
        {
            return this.CompanySize_OptionSetValue.GetOptionSetText(service, this, "sbt_companysize");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string CompanySize_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.CompanySize_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: sbt_connectivitytocustomerpremises
        /// </summary>
        [AttributeLogicalName("sbt_connectivitytocustomerpremises")]
        public eAccount_ConnectivityToCustomerPremises? ConnectivityToCustomerPremises
        {
            get
            {
                if (ConnectivityToCustomerPremises_OptionSetValue != null) { return (eAccount_ConnectivityToCustomerPremises)ConnectivityToCustomerPremises_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ConnectivityToCustomerPremises_OptionSetValue = new OptionSetValue((int)value); }
                else this.ConnectivityToCustomerPremises_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_connectivitytocustomerpremises</para>
        /// </summary>
        [AttributeLogicalName("sbt_connectivitytocustomerpremises")]
        public OptionSetValue ConnectivityToCustomerPremises_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_connectivitytocustomerpremises");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_connectivitytocustomerpremises", value, "ConnectivityToCustomerPremises_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string ConnectivityToCustomerPremises_Text(IOrganizationService service)
        {
            return this.ConnectivityToCustomerPremises_OptionSetValue.GetOptionSetText(service, this, "sbt_connectivitytocustomerpremises");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ConnectivityToCustomerPremises_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ConnectivityToCustomerPremises_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: sbt_connectivitytocustomerpremisesvalue</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_connectivitytocustomerpremisesvalue")]
        public string ConnectivityToCustomerPremisesValue
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_connectivitytocustomerpremisesvalue");
            }
            set
            {
                this.SetPropertyValue("sbt_connectivitytocustomerpremisesvalue", value, 2000, "ConnectivityToCustomerPremisesValue");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_contractenddate</para>
        /// </summary>
        [AttributeLogicalName("sbt_contractenddate")]
        public DateTime? ContractEndDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_contractenddate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_contractenddate", value, "ContractEndDate");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_contractsigneddate</para>
        /// </summary>
        [AttributeLogicalName("sbt_contractsigneddate")]
        public DateTime? ContractSignedDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_contractsigneddate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_contractsigneddate", value, "ContractSignedDate");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_contractstartdate</para>
        /// </summary>
        [AttributeLogicalName("sbt_contractstartdate")]
        public DateTime? ContractStartDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_contractstartdate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_contractstartdate", value, "ContractStartDate");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdby</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedBy_Delegate
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedBy_ExternalParty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdon</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("createdon");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyyominame")]
        public string CreatedByExternalPartyYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyyominame")]
        public string CreatedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditonhold</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditHold
        {
            get
            {
                return this.GetPropertyValue<bool?>("creditonhold");
            }
            set
            {
                this.SetPropertyValue<bool?>("creditonhold", value, "CreditHold");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditlimit</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? CreditLimit
        {
            get
            {
                if (CreditLimitMoney != null) { return CreditLimitMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CreditLimitMoney = new Money(value.Value); }
                else this.CreditLimitMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: creditlimit</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public Money CreditLimitMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("creditlimit");
            }
            set
            {
                this.SetPropertyValue("creditlimit", (Money)value, (decimal)0, (decimal)100000000000000, "CreditLimitMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditlimit_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? CreditLimit_Base
        {
            get
            {
                if (CreditLimit_BaseMoney != null) { return CreditLimit_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: creditlimit_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public Money CreditLimit_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("creditlimit_base");
            }
        }


        /// <summary>
        /// <para>Logical Name: transactioncurrencyid</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference Currency
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("transactioncurrencyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_currentperformancerate</para>
        /// <para>Minimum Value: -100000000000</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("sbt_currentperformancerate")]
        public decimal? CurrentPerformanceRate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("sbt_currentperformancerate");
            }
            set
            {
                this.SetPropertyValue("sbt_currentperformancerate", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "CurrentPerformanceRate");
            }
        }

        /// <summary>
        /// Logical Name: customersizecode
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public eAccount_CustomerSize? CustomerSize
        {
            get
            {
                if (CustomerSize_OptionSetValue != null) { return (eAccount_CustomerSize)CustomerSize_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CustomerSize_OptionSetValue = new OptionSetValue((int)value); }
                else this.CustomerSize_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customersizecode</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public OptionSetValue CustomerSize_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customersizecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customersizecode", value, "CustomerSize_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string CustomerSize_Text(IOrganizationService service)
        {
            return this.CustomerSize_OptionSetValue.GetOptionSetText(service, this, "customersizecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string CustomerSize_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.CustomerSize_OptionSetValue.Value);
        }



        /// <summary>
        /// <para>Logical Name: sbt_ss_data</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_ss_data")]
        public bool? Data
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_ss_data");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_ss_data", value, "Data");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_datesslcertificatesenttocustomer</para>
        /// </summary>
        [AttributeLogicalName("sbt_datesslcertificatesenttocustomer")]
        public DateTime? DateSSLCertificateSentToCustomer
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_datesslcertificatesenttocustomer");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_datesslcertificatesenttocustomer", value, "DateSSLCertificateSentToCustomer");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_deactivateddate</para>
        /// </summary>
        [AttributeLogicalName("sbt_deactivateddate")]
        public DateTime? DeactivatedDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_deactivateddate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_deactivateddate", value, "DeactivatedDate");
            }
        }


        /// <summary>
        /// <para>Logical Name: sbt_defaultplan</para>
        /// </summary>
        [AttributeLogicalName("sbt_defaultplan")]
        public EntityReference DefaultPlan
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("sbt_defaultplan");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("sbt_defaultplan", value, "DefaultPlan");
            }
        }

        /// <summary>
        /// <para>Logical Name: defaultpricelevelidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelidname")]
        public string DefaultPriceLevelIdName
        {
            get
            {
                return this.GetPropertyValue<string>("defaultpricelevelidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: description</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description
        {
            get
            {
                return this.GetPropertyValue<string>("description");
            }
            set
            {
                this.SetPropertyValue("description", value, 2000, "Description");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotbulkemail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotAllowBulkEmails
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotbulkemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotbulkemail", value, "DoNotAllowBulkEmails");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotbulkpostalmail</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotAllowBulkMails
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotbulkpostalmail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotbulkpostalmail", value, "DoNotAllowBulkMails");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotemail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotAllowEmails
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotemail", value, "DoNotAllowEmails");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotfax</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotAllowFaxes
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotfax");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotfax", value, "DoNotAllowFaxes");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotpostalmail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotAllowMails
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotpostalmail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotpostalmail", value, "DoNotAllowMails");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotphone</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotAllowPhoneCalls
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotphone");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotphone", value, "DoNotAllowPhoneCalls");
            }
        }








        /// <summary>
        /// <para>Logical Name: emailaddress1</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string Email
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress1");
            }
            set
            {
                this.SetPropertyValue("emailaddress1", value, 100, "Email");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress2</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EmailAddress2
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress2");
            }
            set
            {
                this.SetPropertyValue("emailaddress2", value, 100, "EmailAddress2");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress3</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EmailAddress3
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress3");
            }
            set
            {
                this.SetPropertyValue("emailaddress3", value, 100, "EmailAddress3");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimageid</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid EntityImageId
        {
            get
            {
                return this.GetPropertyValue<Guid>("entityimageid");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimage_timestamp</para>
        /// </summary>
        [AttributeLogicalName("entityimage_timestamp")]
        public int? EntityImage_Timestamp
        {
            get
            {
                return this.GetPropertyValue<int?>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimage_url</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL
        {
            get
            {
                return this.GetPropertyValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// <para>Logical Name: exchangerate</para>
        /// <para>Minimum Value: 0.0000000001</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 10</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("exchangerate");
            }
        }

        /// <summary>
        /// <para>Logical Name: fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax
        {
            get
            {
                return this.GetPropertyValue<string>("fax");
            }
            set
            {
                this.SetPropertyValue("fax", value, 50, "Fax");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_cp_fixedlineservices</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_cp_fixedlineservices")]
        public bool? FixedLineServices
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_cp_fixedlineservices");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_cp_fixedlineservices", value, "FixedLineServices");
            }
        }

        /// <summary>
        /// <para>Logical Name: followemail</para>
        /// <para>True = Allow</para>
        /// <para>False = Do Not Allow</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        public bool? FollowEmailActivity
        {
            get
            {
                return this.GetPropertyValue<bool?>("followemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("followemail", value, "FollowEmailActivity");
            }
        }


        /// <summary>
        /// <para>Logical Name: ftpsiteurl</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FTPSite
        {
            get
            {
                return this.GetPropertyValue<string>("ftpsiteurl");
            }
            set
            {
                this.SetPropertyValue("ftpsiteurl", value, 200, "FTPSite");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountnumber</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("accountnumber")]
        public string GDSPCode
        {
            get
            {
                return this.GetPropertyValue<string>("accountnumber");
            }
            set
            {
                this.SetPropertyValue("accountnumber", value, 50, "GDSPCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_customerid</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("sbt_customerid")]
        public int? GDSPID
        {
            get
            {
                return this.GetPropertyValue<int?>("sbt_customerid");
            }
            set
            {
                this.SetPropertyValue("sbt_customerid", (int?)value, (int)-2147483648, (int)2147483647, "GDSPID");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_ss_gui</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_ss_gui")]
        public bool? GUI
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_ss_gui");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_ss_gui", value, "GUI");
            }
        }

        /// <summary>
        /// <para>Logical Name: importsequencenumber</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("importsequencenumber");
            }
            set
            {
                this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber");
            }
        }

        /// <summary>
        /// Logical Name: industrycode
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public eAccount_Industry? Industry
        {
            get
            {
                if (Industry_OptionSetValue != null) { return (eAccount_Industry)Industry_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Industry_OptionSetValue = new OptionSetValue((int)value); }
                else this.Industry_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: industrycode</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public OptionSetValue Industry_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("industrycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("industrycode", value, "Industry_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Industry_Text(IOrganizationService service)
        {
            return this.Industry_OptionSetValue.GetOptionSetText(service, this, "industrycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Industry_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Industry_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: sbt_cp_internet</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_cp_internet")]
        public bool? Internet
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_cp_internet");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_cp_internet", value, "Internet");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport1</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport1")]
        public bool? InvoiceDataUsageSummaryByCountryReport
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport1");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport1", value, "InvoiceDataUsageSummaryByCountryReport");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport2</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport2")]
        public bool? InvoiceDataUsageSummaryByNetworkReport
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport2");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport2", value, "InvoiceDataUsageSummaryByNetworkReport");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport3</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport3")]
        public bool? InvoiceDataUsageSummaryForUncontractedNetwor
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport3");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport3", value, "InvoiceDataUsageSummaryForUncontractedNetwor");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport4</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport4")]
        public bool? InvoiceServiceSummaryReport
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport4");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport4", value, "InvoiceServiceSummaryReport");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport5</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport5")]
        public bool? InvoiceServiceSummaryUsageReport
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport5");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport5", value, "InvoiceServiceSummaryUsageReport");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_cp_ipsec</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_cp_ipsec")]
        public bool? IPSEC
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_cp_ipsec");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_cp_ipsec", value, "IPSEC");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_istestaccount</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_istestaccount")]
        public bool? IsTestAccount
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_istestaccount");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_istestaccount", value, "IsTestAccount");
            }
        }

        /// <summary>
        /// <para>Logical Name: isprivate</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isprivate")]
        public bool? IsPrivate
        {
            get
            {
                return this.GetPropertyValue<bool?>("isprivate");
            }
        }


        /// <summary>
        /// <para>Logical Name: lastusedincampaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastDateIncludedInCampaign
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastusedincampaign");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastusedincampaign", value, "LastDateIncludedInCampaign");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastinvoice</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoice")]
        public EntityReference LastInvoice
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ops_lastinvoice");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ops_lastinvoice", value, "LastInvoice");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastinvoiceamount</para>
        /// <para>Minimum Value: -1000000000</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoiceamount")]
        public decimal? LastInvoiceAmount
        {
            get
            {
                if (LastInvoiceAmountMoney != null) { return LastInvoiceAmountMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.LastInvoiceAmountMoney = new Money(value.Value); }
                else this.LastInvoiceAmountMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ops_lastinvoiceamount</para>
        /// <para>Minimum Value: -1000000000</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoiceamount")]
        public Money LastInvoiceAmountMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("ops_lastinvoiceamount");
            }
            set
            {
                this.SetPropertyValue("ops_lastinvoiceamount", (Money)value, (decimal)-1000000000, (decimal)1000000000, "LastInvoiceAmountMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastinvoiceamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoiceamount_base")]
        public decimal? LastInvoiceAmount_Base
        {
            get
            {
                if (LastInvoiceAmount_BaseMoney != null) { return LastInvoiceAmount_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ops_lastinvoiceamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoiceamount_base")]
        public Money LastInvoiceAmount_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("ops_lastinvoiceamount_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastinvoicedate</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoicedate")]
        public DateTime? LastInvoiceDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("ops_lastinvoicedate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("ops_lastinvoicedate", value, "LastInvoiceDate");
            }
        }

        /// <summary>
        /// <para>Logical Name: lastonholdtime</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastonholdtime");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastonholdtime", value, "LastOnHoldTime");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastpaidamount</para>
        /// <para>Minimum Value: -1000000000</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaidamount")]
        public decimal? LastPaidAmount
        {
            get
            {
                if (LastPaidAmountMoney != null) { return LastPaidAmountMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.LastPaidAmountMoney = new Money(value.Value); }
                else this.LastPaidAmountMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ops_lastpaidamount</para>
        /// <para>Minimum Value: -1000000000</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaidamount")]
        public Money LastPaidAmountMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("ops_lastpaidamount");
            }
            set
            {
                this.SetPropertyValue("ops_lastpaidamount", (Money)value, (decimal)-1000000000, (decimal)1000000000, "LastPaidAmountMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastpaidamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaidamount_base")]
        public decimal? LastPaidAmount_Base
        {
            get
            {
                if (LastPaidAmount_BaseMoney != null) { return LastPaidAmount_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ops_lastpaidamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaidamount_base")]
        public Money LastPaidAmount_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("ops_lastpaidamount_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastpayment</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpayment")]
        public EntityReference LastPayment
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ops_lastpayment");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ops_lastpayment", value, "LastPayment");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastpaymentdate</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaymentdate")]
        public DateTime? LastPaymentDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("ops_lastpaymentdate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("ops_lastpaymentdate", value, "LastPaymentDate");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedid</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference LastSLAApplied
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slainvokedid");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string MainPhone
        {
            get
            {
                return this.GetPropertyValue<string>("telephone1");
            }
            set
            {
                this.SetPropertyValue("telephone1", value, 50, "MainPhone");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketcap</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public decimal? MarketCapitalization
        {
            get
            {
                if (MarketCapitalizationMoney != null) { return MarketCapitalizationMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.MarketCapitalizationMoney = new Money(value.Value); }
                else this.MarketCapitalizationMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: marketcap</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public Money MarketCapitalizationMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("marketcap");
            }
            set
            {
                this.SetPropertyValue("marketcap", (Money)value, (decimal)0, (decimal)100000000000000, "MarketCapitalizationMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketcap_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public decimal? MarketCapitalization_Base
        {
            get
            {
                if (MarketCapitalization_BaseMoney != null) { return MarketCapitalization_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: marketcap_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public Money MarketCapitalization_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("marketcap_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketingonly</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        public bool? MarketingOnly
        {
            get
            {
                return this.GetPropertyValue<bool?>("marketingonly");
            }
            set
            {
                this.SetPropertyValue<bool?>("marketingonly", value, "MarketingOnly");
            }
        }


        /// <summary>
        /// <para>Logical Name: masterid</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterID
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("masterid");
            }
        }

        /// <summary>
        /// <para>Logical Name: masteraccountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteraccountidname")]
        public string MasterAccountIdName
        {
            get
            {
                return this.GetPropertyValue<string>("masteraccountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: masteraccountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteraccountidyominame")]
        public string MasterAccountIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("masteraccountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: merged</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged
        {
            get
            {
                return this.GetPropertyValue<bool?>("merged");
            }
        }


        /// <summary>
        /// <para>Logical Name: sbt_minimumordersize</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_minimumordersize")]
        public string MinimumOrderSize
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_minimumordersize");
            }
            set
            {
                this.SetPropertyValue("sbt_minimumordersize", value, 100, "MinimumOrderSize");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedby</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedBy_Delegate
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedBy_ExternalParty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedon</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("modifiedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyyominame")]
        public string ModifiedByExternalPartyYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyyominame")]
        public string ModifiedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: numberofemployees</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? No_OfEmployees
        {
            get
            {
                return this.GetPropertyValue<int?>("numberofemployees");
            }
            set
            {
                this.SetPropertyValue("numberofemployees", (int?)value, (int)0, (int)1000000000, "No_OfEmployees");
            }
        }

        /// <summary>
        /// <para>Logical Name: onholdtime</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime_Minutes
        {
            get
            {
                return this.GetPropertyValue<int?>("onholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("opendeals")]
        public int? OpenDeals
        {
            get
            {
                return this.GetPropertyValue<int?>("opendeals");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals_date</para>
        /// </summary>
        [AttributeLogicalName("opendeals_date")]
        public DateTime? OpenDeals_LastUpdatedTime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("opendeals_date");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals_state</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("opendeals_state")]
        public int? OpenDeals_State
        {
            get
            {
                return this.GetPropertyValue<int?>("opendeals_state");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public decimal? OpenRevenue
        {
            get
            {
                if (OpenRevenueMoney != null) { return OpenRevenueMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: openrevenue</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public Money OpenRevenueMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("openrevenue");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public decimal? OpenRevenue_Base
        {
            get
            {
                if (OpenRevenue_BaseMoney != null) { return OpenRevenue_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: openrevenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public Money OpenRevenue_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("openrevenue_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_date</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_date")]
        public DateTime? OpenRevenue_LastUpdatedTime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("openrevenue_date");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_state</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_state")]
        public int? OpenRevenue_State
        {
            get
            {
                return this.GetPropertyValue<int?>("openrevenue_state");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastinvoicename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("ops_lastinvoicename")]
        public string Ops_LastInvoiceName
        {
            get
            {
                return this.GetPropertyValue<string>("ops_lastinvoicename");
            }
        }

        /// <summary>
        /// <para>Logical Name: ops_lastpaymentname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("ops_lastpaymentname")]
        public string Ops_LastPaymentName
        {
            get
            {
                return this.GetPropertyValue<string>("ops_lastpaymentname");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadid</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLead
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("originatingleadid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("originatingleadid", value, "OriginatingLead");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("originatingleadidname")]
        public string OriginatingLeadIdName
        {
            get
            {
                return this.GetPropertyValue<string>("originatingleadidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("originatingleadidyominame")]
        public string OriginatingLeadIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("originatingleadidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string OtherPhone
        {
            get
            {
                return this.GetPropertyValue<string>("telephone2");
            }
            set
            {
                this.SetPropertyValue("telephone2", value, 50, "OtherPhone");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_outstandingbalance</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_outstandingbalance")]
        public decimal? OutstandingBalance
        {
            get
            {
                if (OutstandingBalanceMoney != null) { return OutstandingBalanceMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.OutstandingBalanceMoney = new Money(value.Value); }
                else this.OutstandingBalanceMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_outstandingbalance</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_outstandingbalance")]
        public Money OutstandingBalanceMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_outstandingbalance");
            }
            set
            {
                this.SetPropertyValue("sbt_outstandingbalance", (Money)value, (decimal)0, (decimal)1000000000, "OutstandingBalanceMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_outstandingbalance_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_outstandingbalance_base")]
        public decimal? OutstandingBalance_Base
        {
            get
            {
                if (OutstandingBalance_BaseMoney != null) { return OutstandingBalance_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_outstandingbalance_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_outstandingbalance_base")]
        public Money OutstandingBalance_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_outstandingbalance_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: ownerid</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference Owner
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ownerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ownerid", value, "Owner");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName
        {
            get
            {
                return this.GetPropertyValue<string>("owneridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridtype</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType
        {
            get
            {
                return this.GetPropertyValue<string>("owneridtype");
            }
            set
            {
                this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridyominame")]
        public string OwnerIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("owneridyominame");
            }
        }

        /// <summary>
        /// Logical Name: ownershipcode
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public eAccount_Ownership? Ownership
        {
            get
            {
                if (Ownership_OptionSetValue != null) { return (eAccount_Ownership)Ownership_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Ownership_OptionSetValue = new OptionSetValue((int)value); }
                else this.Ownership_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ownershipcode</para>
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public OptionSetValue Ownership_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("ownershipcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("ownershipcode", value, "Ownership_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Ownership_Text(IOrganizationService service)
        {
            return this.Ownership_OptionSetValue.GetOptionSetText(service, this, "ownershipcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Ownership_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Ownership_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: owningbusinessunit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningbusinessunit");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningteam</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningteam");
            }
        }

        /// <summary>
        /// <para>Logical Name: owninguser</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owninguser");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountid</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccount
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("parentaccountid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("parentaccountid", value, "ParentAccount");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentaccountidname")]
        public string ParentAccountIdName
        {
            get
            {
                return this.GetPropertyValue<string>("parentaccountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentaccountidyominame")]
        public string ParentAccountIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("parentaccountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: participatesinworkflow</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow
        {
            get
            {
                return this.GetPropertyValue<bool?>("participatesinworkflow");
            }
            set
            {
                this.SetPropertyValue<bool?>("participatesinworkflow", value, "ParticipatesInWorkflow");
            }
        }


        /// <summary>
        /// <para>Logical Name: sbt_password</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_password")]
        public string Password
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_password");
            }
            set
            {
                this.SetPropertyValue("sbt_password", value, 100, "Password");
            }
        }

        /// <summary>
        /// Logical Name: paymenttermscode
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public eAccount_PaymentTerms? PaymentTerms
        {
            get
            {
                if (PaymentTerms_OptionSetValue != null) { return (eAccount_PaymentTerms)PaymentTerms_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PaymentTerms_OptionSetValue = new OptionSetValue((int)value); }
                else this.PaymentTerms_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: paymenttermscode</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public OptionSetValue PaymentTerms_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("paymenttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("paymenttermscode", value, "PaymentTerms_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string PaymentTerms_Text(IOrganizationService service)
        {
            return this.PaymentTerms_OptionSetValue.GetOptionSetText(service, this, "paymenttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PaymentTerms_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PaymentTerms_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: sbt_performancestatus
        /// </summary>
        [AttributeLogicalName("sbt_performancestatus")]
        public eAccount_PerformanceStatus? PerformanceStatus
        {
            get
            {
                if (PerformanceStatus_OptionSetValue != null) { return (eAccount_PerformanceStatus)PerformanceStatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PerformanceStatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.PerformanceStatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_performancestatus</para>
        /// </summary>
        [AttributeLogicalName("sbt_performancestatus")]
        public OptionSetValue PerformanceStatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_performancestatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_performancestatus", value, "PerformanceStatus_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string PerformanceStatus_Text(IOrganizationService service)
        {
            return this.PerformanceStatus_OptionSetValue.GetOptionSetText(service, this, "sbt_performancestatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PerformanceStatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PerformanceStatus_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: sbt_planallocationinventory</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_planallocationinventory")]
        public bool? PlanAllocationViaInventorySettings
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_planallocationinventory");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_planallocationinventory", value, "PlanAllocationViaInventorySettings");
            }
        }

        /// <summary>
        /// Logical Name: preferredappointmentdaycode
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public eAccount_PreferredDay? PreferredDay
        {
            get
            {
                if (PreferredDay_OptionSetValue != null) { return (eAccount_PreferredDay)PreferredDay_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PreferredDay_OptionSetValue = new OptionSetValue((int)value); }
                else this.PreferredDay_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredappointmentdaycode</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public OptionSetValue PreferredDay_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredappointmentdaycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredappointmentdaycode", value, "PreferredDay_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string PreferredDay_Text(IOrganizationService service)
        {
            return this.PreferredDay_OptionSetValue.GetOptionSetText(service, this, "preferredappointmentdaycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PreferredDay_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PreferredDay_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: preferredequipmentid</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredFacility_Equipment
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredequipmentid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredequipmentid", value, "PreferredFacility_Equipment");
            }
        }

        /// <summary>
        /// Logical Name: preferredcontactmethodcode
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public eAccount_PreferredMethodOfContact? PreferredMethodOfContact
        {
            get
            {
                if (PreferredMethodOfContact_OptionSetValue != null) { return (eAccount_PreferredMethodOfContact)PreferredMethodOfContact_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PreferredMethodOfContact_OptionSetValue = new OptionSetValue((int)value); }
                else this.PreferredMethodOfContact_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredcontactmethodcode</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public OptionSetValue PreferredMethodOfContact_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredcontactmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredcontactmethodcode", value, "PreferredMethodOfContact_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string PreferredMethodOfContact_Text(IOrganizationService service)
        {
            return this.PreferredMethodOfContact_OptionSetValue.GetOptionSetText(service, this, "preferredcontactmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PreferredMethodOfContact_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PreferredMethodOfContact_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: preferredserviceid</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredService
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredserviceid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredserviceid", value, "PreferredService");
            }
        }

        /// <summary>
        /// Logical Name: preferredappointmenttimecode
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public eAccount_PreferredTime? PreferredTime
        {
            get
            {
                if (PreferredTime_OptionSetValue != null) { return (eAccount_PreferredTime)PreferredTime_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PreferredTime_OptionSetValue = new OptionSetValue((int)value); }
                else this.PreferredTime_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredappointmenttimecode</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public OptionSetValue PreferredTime_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredappointmenttimecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredappointmenttimecode", value, "PreferredTime_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string PreferredTime_Text(IOrganizationService service)
        {
            return this.PreferredTime_OptionSetValue.GetOptionSetText(service, this, "preferredappointmenttimecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PreferredTime_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PreferredTime_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuserid</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredUser
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredsystemuserid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredsystemuserid", value, "PreferredUser");
            }
        }




        /// <summary>
        /// <para>Logical Name: preferredequipmentidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentidname")]
        public string PreferredEquipmentIdName
        {
            get
            {
                return this.GetPropertyValue<string>("preferredequipmentidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredserviceidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceidname")]
        public string PreferredServiceIdName
        {
            get
            {
                return this.GetPropertyValue<string>("preferredserviceidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuseridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuseridname")]
        public string PreferredSystemUserIdName
        {
            get
            {
                return this.GetPropertyValue<string>("preferredsystemuseridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuseridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuseridyominame")]
        public string PreferredSystemUserIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("preferredsystemuseridyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_previousperformancerate</para>
        /// <para>Minimum Value: -100000000000</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("sbt_previousperformancerate")]
        public decimal? PreviousPerformanceRate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("sbt_previousperformancerate");
            }
            set
            {
                this.SetPropertyValue("sbt_previousperformancerate", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "PreviousPerformanceRate");
            }
        }

        /// <summary>
        /// <para>Logical Name: defaultpricelevelid</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference PriceList
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("defaultpricelevelid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("defaultpricelevelid", value, "PriceList");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactid</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContact
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("primarycontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("primarycontactid", value, "PrimaryContact");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarysatoriid</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("primarysatoriid")]
        public string PrimarySatoriID
        {
            get
            {
                return this.GetPropertyValue<string>("primarysatoriid");
            }
            set
            {
                this.SetPropertyValue("primarysatoriid", value, 200, "PrimarySatoriID");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarytwitterid</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("primarytwitterid")]
        public string PrimaryTwitterID
        {
            get
            {
                return this.GetPropertyValue<string>("primarytwitterid");
            }
            set
            {
                this.SetPropertyValue("primarytwitterid", value, 20, "PrimaryTwitterID");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidname")]
        public string PrimaryContactIdName
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidyominame")]
        public string PrimaryContactIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: processid</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid Process
        {
            get
            {
                return this.GetPropertyValue<Guid>("processid");
            }
            set
            {
                this.SetPropertyValue<Guid>("processid", value, "Process");
            }
        }

        /// <summary>
        /// <para>Logical Name: stageid</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid ProcessStage
        {
            get
            {
                return this.GetPropertyValue<Guid>("stageid");
            }
            set
            {
                this.SetPropertyValue<Guid>("stageid", value, "ProcessStage");
            }
        }

        /// <summary>
        /// Logical Name: sbt_profiletype
        /// </summary>
        [AttributeLogicalName("sbt_profiletype")]
        public eAccount_ProfileType? ProfileType
        {
            get
            {
                if (ProfileType_OptionSetValue != null) { return (eAccount_ProfileType)ProfileType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ProfileType_OptionSetValue = new OptionSetValue((int)value); }
                else this.ProfileType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_profiletype</para>
        /// </summary>
        [AttributeLogicalName("sbt_profiletype")]
        public OptionSetValue ProfileType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_profiletype");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_profiletype", value, "ProfileType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string ProfileType_Text(IOrganizationService service)
        {
            return this.ProfileType_OptionSetValue.GetOptionSetText(service, this, "sbt_profiletype");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ProfileType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ProfileType_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: sbt_recontractdue</para>
        /// </summary>
        [AttributeLogicalName("sbt_recontractdue")]
        public DateTime? Re_ContractDue
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("sbt_recontractdue");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("sbt_recontractdue", value, "Re_ContractDue");
            }
        }

        /// <summary>
        /// <para>Logical Name: overriddencreatedon</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? RecordCreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("overriddencreatedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn");
            }
        }

        /// <summary>
        /// Logical Name: customertypecode
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public eAccount_RelationshipType? RelationshipType
        {
            get
            {
                if (RelationshipType_OptionSetValue != null) { return (eAccount_RelationshipType)RelationshipType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.RelationshipType_OptionSetValue = new OptionSetValue((int)value); }
                else this.RelationshipType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customertypecode</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public OptionSetValue RelationshipType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customertypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customertypecode", value, "RelationshipType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string RelationshipType_Text(IOrganizationService service)
        {
            return this.RelationshipType_OptionSetValue.GetOptionSetText(service, this, "customertypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string RelationshipType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.RelationshipType_OptionSetValue.Value);
        }













        /// <summary>
        /// <para>Logical Name: sbt_defaultplanname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_defaultplanname")]
        public string Sbt_DefaultPlanName
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_defaultplanname");
            }
        }


















        /// <summary>
        /// <para>Logical Name: donotsendmm</para>
        /// <para>True = Do Not Send</para>
        /// <para>False = Send</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? SendMarketingMaterials
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotsendmm");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotsendmm", value, "SendMarketingMaterials");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_sendreport6</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_sendreport6")]
        public bool? SendReport6
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_sendreport6");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_sendreport6", value, "SendReport6");
            }
        }

        /// <summary>
        /// <para>Logical Name: sharesoutstanding</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("sharesoutstanding")]
        public int? SharesOutstanding
        {
            get
            {
                return this.GetPropertyValue<int?>("sharesoutstanding");
            }
            set
            {
                this.SetPropertyValue("sharesoutstanding", (int?)value, (int)0, (int)1000000000, "SharesOutstanding");
            }
        }

        /// <summary>
        /// Logical Name: shippingmethodcode
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public eAccount_ShippingMethod? ShippingMethod
        {
            get
            {
                if (ShippingMethod_OptionSetValue != null) { return (eAccount_ShippingMethod)ShippingMethod_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ShippingMethod_OptionSetValue = new OptionSetValue((int)value); }
                else this.ShippingMethod_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public OptionSetValue ShippingMethod_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("shippingmethodcode", value, "ShippingMethod_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string ShippingMethod_Text(IOrganizationService service)
        {
            return this.ShippingMethod_OptionSetValue.GetOptionSetText(service, this, "shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ShippingMethod_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ShippingMethod_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: sic</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string SICCode
        {
            get
            {
                return this.GetPropertyValue<string>("sic");
            }
            set
            {
                this.SetPropertyValue("sic", value, 20, "SICCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_simforecasttemplate</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_simforecasttemplate")]
        public string SIMForecastTemplate
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_simforecasttemplate");
            }
            set
            {
                this.SetPropertyValue("sbt_simforecasttemplate", value, 100, "SIMForecastTemplate");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaid</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLA
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slaid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("slaid", value, "SLA");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName
        {
            get
            {
                return this.GetPropertyValue<string>("slainvokedidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slaname")]
        public string SLAName
        {
            get
            {
                return this.GetPropertyValue<string>("slaname");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_ss_sms</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_ss_sms")]
        public bool? SMS
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_ss_sms");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_ss_sms", value, "SMS");
            }
        }


        /// <summary>
        /// Logical Name: statecode
        /// </summary>
        [AttributeLogicalName("statecode")]
        public eAccount_Status? Status
        {
            get
            {
                if (Status_OptionSetValue != null) { return (eAccount_Status)Status_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
                else this.Status_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statecode</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OptionSetValue Status_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Status_Text(IOrganizationService service)
        {
            return this.Status_OptionSetValue.GetOptionSetText(service, this, "statecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Status_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: statuscode
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public eAccount_StatusReason? StatusReason
        {
            get
            {
                if (StatusReason_OptionSetValue != null) { return (eAccount_StatusReason)StatusReason_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
                else this.StatusReason_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statuscode</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OptionSetValue StatusReason_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statuscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string StatusReason_Text(IOrganizationService service)
        {
            return this.StatusReason_OptionSetValue.GetOptionSetText(service, this, "statuscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string StatusReason_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: stockexchange</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange
        {
            get
            {
                return this.GetPropertyValue<string>("stockexchange");
            }
            set
            {
                this.SetPropertyValue("stockexchange", value, 20, "StockExchange");
            }
        }

        /// <summary>
        /// Logical Name: sbt_subscribedservices
        /// </summary>
        [AttributeLogicalName("sbt_subscribedservices")]
        public eAccount_SubscribedServices? SubscribedServices
        {
            get
            {
                if (SubscribedServices_OptionSetValue != null) { return (eAccount_SubscribedServices)SubscribedServices_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.SubscribedServices_OptionSetValue = new OptionSetValue((int)value); }
                else this.SubscribedServices_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_subscribedservices</para>
        /// </summary>
        [AttributeLogicalName("sbt_subscribedservices")]
        public OptionSetValue SubscribedServices_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_subscribedservices");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_subscribedservices", value, "SubscribedServices_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string SubscribedServices_Text(IOrganizationService service)
        {
            return this.SubscribedServices_OptionSetValue.GetOptionSetText(service, this, "sbt_subscribedservices");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string SubscribedServices_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.SubscribedServices_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: sbt_subscribedservicesvalue</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_subscribedservicesvalue")]
        public string SubscribedServicesValue
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_subscribedservicesvalue");
            }
            set
            {
                this.SetPropertyValue("sbt_subscribedservicesvalue", value, 2000, "SubscribedServicesValue");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_tax</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100</para>
        /// </summary>
        [AttributeLogicalName("sbt_tax")]
        public int? Tax
        {
            get
            {
                return this.GetPropertyValue<int?>("sbt_tax");
            }
            set
            {
                this.SetPropertyValue("sbt_tax", (int?)value, (int)0, (int)100, "Tax");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("telephone3");
            }
            set
            {
                this.SetPropertyValue("telephone3", value, 50, "Telephone3");
            }
        }

        /// <summary>
        /// <para>Logical Name: territoryid</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference Territory
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("territoryid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("territoryid", value, "Territory");
            }
        }

        /// <summary>
        /// Logical Name: territorycode
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public eAccount_TerritoryCode? TerritoryCode
        {
            get
            {
                if (TerritoryCode_OptionSetValue != null) { return (eAccount_TerritoryCode)TerritoryCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.TerritoryCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.TerritoryCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: territorycode</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public OptionSetValue TerritoryCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("territorycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("territorycode", value, "TerritoryCode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string TerritoryCode_Text(IOrganizationService service)
        {
            return this.TerritoryCode_OptionSetValue.GetOptionSetText(service, this, "territorycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string TerritoryCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.TerritoryCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: territoryidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("territoryidname")]
        public string TerritoryIdName
        {
            get
            {
                return this.GetPropertyValue<string>("territoryidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tickersymbol</para>
        /// <para>Max Length: 10 characters</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol
        {
            get
            {
                return this.GetPropertyValue<string>("tickersymbol");
            }
            set
            {
                this.SetPropertyValue("tickersymbol", value, 10, "TickerSymbol");
            }
        }

        /// <summary>
        /// <para>Logical Name: timespentbymeonemailandmeetings</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string TimeSpentByMe
        {
            get
            {
                return this.GetPropertyValue<string>("timespentbymeonemailandmeetings");
            }
        }

        /// <summary>
        /// <para>Logical Name: timezoneruleversionnumber</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("timezoneruleversionnumber");
            }
            set
            {
                this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_totalinventoryitems</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("sbt_totalinventoryitems")]
        public int? TotalInventoryItems
        {
            get
            {
                return this.GetPropertyValue<int?>("sbt_totalinventoryitems");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_totalpayable</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_totalpayable")]
        public decimal? TotalPayable
        {
            get
            {
                if (TotalPayableMoney != null) { return TotalPayableMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.TotalPayableMoney = new Money(value.Value); }
                else this.TotalPayableMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_totalpayable</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_totalpayable")]
        public Money TotalPayableMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_totalpayable");
            }
            set
            {
                this.SetPropertyValue("sbt_totalpayable", (Money)value, (decimal)0, (decimal)1000000000, "TotalPayableMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_totalpayable_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_totalpayable_base")]
        public decimal? TotalPayable_Base
        {
            get
            {
                if (TotalPayable_BaseMoney != null) { return TotalPayable_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_totalpayable_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("sbt_totalpayable_base")]
        public Money TotalPayable_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("sbt_totalpayable_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_tradingname</para>
        /// <para>Max Length: 300 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_tradingname")]
        public string TradingName
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_tradingname");
            }
            set
            {
                this.SetPropertyValue("sbt_tradingname", value, 300, "TradingName");
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName
        {
            get
            {
                return this.GetPropertyValue<string>("transactioncurrencyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: traversedpath</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath
        {
            get
            {
                return this.GetPropertyValue<string>("traversedpath");
            }
            set
            {
                this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath");
            }
        }

        /// <summary>
        /// Logical Name: sbt_type
        /// </summary>
        [AttributeLogicalName("sbt_type")]
        public eAccount_Type? Type
        {
            get
            {
                if (Type_OptionSetValue != null) { return (eAccount_Type)Type_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Type_OptionSetValue = new OptionSetValue((int)value); }
                else this.Type_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: sbt_type</para>
        /// </summary>
        [AttributeLogicalName("sbt_type")]
        public OptionSetValue Type_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("sbt_type");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("sbt_type", value, "Type_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Type_Text(IOrganizationService service)
        {
            return this.Type_OptionSetValue.GetOptionSetText(service, this, "sbt_type");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Type_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Type_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: utcconversiontimezonecode</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode
        {
            get
            {
                return this.GetPropertyValue<int?>("utcconversiontimezonecode");
            }
            set
            {
                this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: versionnumber</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public int? VersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("versionnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_ss_voice</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("sbt_ss_voice")]
        public bool? Voice
        {
            get
            {
                return this.GetPropertyValue<bool?>("sbt_ss_voice");
            }
            set
            {
                this.SetPropertyValue<bool?>("sbt_ss_voice", value, "Voice");
            }
        }

        /// <summary>
        /// <para>Logical Name: websiteurl</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string Website
        {
            get
            {
                return this.GetPropertyValue<string>("websiteurl");
            }
            set
            {
                this.SetPropertyValue("websiteurl", value, 200, "Website");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_whitelistapiip</para>
        /// <para>Max Length: 400 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_whitelistapiip")]
        public string WhitelistedAPIIP
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_whitelistapiip");
            }
            set
            {
                this.SetPropertyValue("sbt_whitelistapiip", value, 400, "WhitelistedAPIIP");
            }
        }

        /// <summary>
        /// <para>Logical Name: sbt_whitelistedguiip</para>
        /// <para>Max Length: 400 characters</para>
        /// </summary>
        [AttributeLogicalName("sbt_whitelistedguiip")]
        public string WhitelistedGUIIP
        {
            get
            {
                return this.GetPropertyValue<string>("sbt_whitelistedguiip");
            }
            set
            {
                this.SetPropertyValue("sbt_whitelistedguiip", value, 400, "WhitelistedGUIIP");
            }
        }

        /// <summary>
        /// <para>Logical Name: yominame</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string YomiAccountName
        {
            get
            {
                return this.GetPropertyValue<string>("yominame");
            }
            set
            {
                this.SetPropertyValue("yominame", value, 160, "YomiAccountName");
            }
        }


        /// <summary>
        /// <para><b>Account (Master ID)</b></para>
        /// <para>Schema Name: account_master_account</para>
        /// </summary>
        public List<Account> GetAccounts_MasterID(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(service, this.Id, "account", "masterid", columns); }

        /// <summary>
        /// <para><b>Account (Master ID)</b></para>
        /// <para>Schema Name: account_master_account</para>
        /// </summary>
        public List<Account> GetAccounts_MasterID(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(service, this.Id, "account", "masterid", columns); }

        /// <summary>
        /// <para><b>Account (Parent Account)</b></para>
        /// <para>Schema Name: account_parent_account</para>
        /// </summary>
        public List<Account> GetAccounts_ParentAccount(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(service, this.Id, "account", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Account (Parent Account)</b></para>
        /// <para>Schema Name: account_parent_account</para>
        /// </summary>
        public List<Account> GetAccounts_ParentAccount(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(service, this.Id, "account", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_actioncard</para>
        /// </summary>
        public List<Entity> GetActionCards(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_actioncard</para>
        /// </summary>
        public List<Entity> GetActionCards(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_activity_parties</para>
        /// </summary>
        public List<Entity> GetActivityParties(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_activity_parties</para>
        /// </summary>
        public List<Entity> GetActivityParties(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Annotation</para>
        /// </summary>
        public List<Entity> GetNotes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Annotation</para>
        /// </summary>
        public List<Entity> GetNotes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Appointments</para>
        /// </summary>
        public List<Entity> GetAppointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Appointments</para>
        /// </summary>
        public List<Entity> GetAppointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetSystemJobs(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetSystemJobs(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_bookableresource_AccountId</para>
        /// </summary>
        public List<Entity> GetBookableResources(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bookableresource", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_bookableresource_AccountId</para>
        /// </summary>
        public List<Entity> GetBookableResources(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bookableresource", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetBulkDeleteFailures(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetBulkDeleteFailures(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: CreatedAccount_BulkOperationLogs2</para>
        /// </summary>
        public List<Entity> GetBulkOperationLogs(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "createdobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: CreatedAccount_BulkOperationLogs2</para>
        /// </summary>
        public List<Entity> GetBulkOperationLogs(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "createdobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SourceAccount_BulkOperationLogs</para>
        /// </summary>
        public List<Entity> GetBulkOperationLogs2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SourceAccount_BulkOperationLogs</para>
        /// </summary>
        public List<Entity> GetBulkOperationLogs2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections1</para>
        /// </summary>
        public List<Entity> GetConnections(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections1</para>
        /// </summary>
        public List<Entity> GetConnections(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections2</para>
        /// </summary>
        public List<Entity> GetConnections2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections2</para>
        /// </summary>
        public List<Entity> GetConnections2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contact_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContacts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contact", "parentcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contact_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContacts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contact", "parentcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_billingcustomer_accounts</para>
        /// </summary>
        public List<Entity> GetContracts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "billingcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_billingcustomer_accounts</para>
        /// </summary>
        public List<Entity> GetContracts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "billingcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContracts2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContracts2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contractlineitem_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContractLines(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contractdetail", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contractlineitem_customer_accounts</para>
        /// </summary>
        public List<Entity> GetContractLines(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contractdetail", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_CustomerAddress</para>
        /// </summary>
        public List<Entity> GetAddresses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeraddress", "parentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_CustomerAddress</para>
        /// </summary>
        public List<Entity> GetAddresses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeraddress", "parentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_opportunity_roles</para>
        /// </summary>
        public List<Entity> GetOpportunityRelationships(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeropportunityrole", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_opportunity_roles</para>
        /// </summary>
        public List<Entity> GetOpportunityRelationships(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeropportunityrole", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_customer</para>
        /// </summary>
        public List<Entity> GetCustomerRelationships(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_customer</para>
        /// </summary>
        public List<Entity> GetCustomerRelationships(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_partner</para>
        /// </summary>
        public List<Entity> GetCustomerRelationships2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "partnerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_partner</para>
        /// </summary>
        public List<Entity> GetCustomerRelationships2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "partnerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_EmailSender</para>
        /// </summary>
        public List<Entity> GetEmailMessages(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "emailsender", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_EmailSender</para>
        /// </summary>
        public List<Entity> GetEmailMessages(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "emailsender", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_SendersAccount</para>
        /// </summary>
        public List<Entity> GetEmailMessages2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "sendersaccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_SendersAccount</para>
        /// </summary>
        public List<Entity> GetEmailMessages2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "sendersaccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Emails</para>
        /// </summary>
        public List<Entity> GetEmailMessages3(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Emails</para>
        /// </summary>
        public List<Entity> GetEmailMessages3(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Account</para>
        /// </summary>
        public List<Entity> GetEntitlements(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Account</para>
        /// </summary>
        public List<Entity> GetEntitlements(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Customer</para>
        /// </summary>
        public List<Entity> GetEntitlements2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Customer</para>
        /// </summary>
        public List<Entity> GetEntitlements2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Faxes</para>
        /// </summary>
        public List<Entity> GetFaxes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Faxes</para>
        /// </summary>
        public List<Entity> GetFaxes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_customer_accounts</para>
        /// </summary>
        public List<Entity> GetCases(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_customer_accounts</para>
        /// </summary>
        public List<Entity> GetCases(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: invoice_customer_accounts</para>
        /// </summary>
        public List<Entity> GetInvoices(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "invoice", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: invoice_customer_accounts</para>
        /// </summary>
        public List<Entity> GetInvoices(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "invoice", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_customer_accounts</para>
        /// </summary>
        public List<Entity> GetLeads(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_customer_accounts</para>
        /// </summary>
        public List<Entity> GetLeads(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_parent_account</para>
        /// </summary>
        public List<Entity> GetLeads2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_parent_account</para>
        /// </summary>
        public List<Entity> GetLeads2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Letters</para>
        /// </summary>
        public List<Entity> GetLetters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Letters</para>
        /// </summary>
        public List<Entity> GetLetters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetMailboxAutoTrackingFolders(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetMailboxAutoTrackingFolders(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_customer_accounts</para>
        /// </summary>
        public List<Entity> GetOpportunities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_customer_accounts</para>
        /// </summary>
        public List<Entity> GetOpportunities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_parent_account</para>
        /// </summary>
        public List<Entity> GetOpportunities2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_parent_account</para>
        /// </summary>
        public List<Entity> GetOpportunities2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Phonecalls</para>
        /// </summary>
        public List<Entity> GetPhoneCalls(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Phonecalls</para>
        /// </summary>
        public List<Entity> GetPhoneCalls(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostFollows</para>
        /// </summary>
        public List<Entity> GetFollows(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostFollows</para>
        /// </summary>
        public List<Entity> GetFollows(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRegardings</para>
        /// </summary>
        public List<Entity> GetPostRegarding(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRegardings</para>
        /// </summary>
        public List<Entity> GetPostRegarding(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRoles</para>
        /// </summary>
        public List<Entity> GetPostRoles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRoles</para>
        /// </summary>
        public List<Entity> GetPostRoles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> GetFieldSharing(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> GetFieldSharing(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetProcessSessions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetProcessSessions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_inventoryitem_billing_product</para>
        /// </summary>
        public List<Entity> GetProducts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "product", "sbt_inventoryitembillingid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_inventoryitem_billing_product</para>
        /// </summary>
        public List<Entity> GetProducts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "product", "sbt_inventoryitembillingid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_inventoryitem_ownership_product</para>
        /// </summary>
        public List<Entity> GetProducts2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "product", "sbt_inventoryitemownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_inventoryitem_ownership_product</para>
        /// </summary>
        public List<Entity> GetProducts2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "product", "sbt_inventoryitemownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: quote_customer_accounts</para>
        /// </summary>
        public List<Entity> GetQuotes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quote", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: quote_customer_accounts</para>
        /// </summary>
        public List<Entity> GetQuotes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quote", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetRecurringAppointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetRecurringAppointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: order_customer_accounts</para>
        /// </summary>
        public List<Entity> GetOrders(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "salesorder", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: order_customer_accounts</para>
        /// </summary>
        public List<Entity> GetOrders(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "salesorder", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_accountalert_Account</para>
        /// </summary>
        public List<Entity> GetPortalAlerts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_accountalert", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_accountalert_Account</para>
        /// </summary>
        public List<Entity> GetPortalAlerts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_accountalert", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_accountproduct_Account</para>
        /// </summary>
        public List<Entity> GetAccountProducts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_accountproduct", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_accountproduct_Account</para>
        /// </summary>
        public List<Entity> GetAccountProducts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_accountproduct", "sbt_account", columns); }

        /// <summary>
        /// <para>account</para>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: bpf_account_sbt_bpf_a555e76c20444851aaefc5668b3e6870</para>
        /// </summary>
        public List<Entity> GetAccount(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_bpf_a555e76c20444851aaefc5668b3e6870", "bpf_accountid", columns); }

        /// <summary>
        /// <para>account</para>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: bpf_account_sbt_bpf_a555e76c20444851aaefc5668b3e6870</para>
        /// </summary>
        public List<Entity> GetAccount(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_bpf_a555e76c20444851aaefc5668b3e6870", "bpf_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_charge_Account</para>
        /// </summary>
        public List<Entity> GetCharges(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_charge", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_charge_Account</para>
        /// </summary>
        public List<Entity> GetCharges(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_charge", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_contracttier</para>
        /// </summary>
        public List<Entity> GetContractTiers(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_contracttier", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_contracttier</para>
        /// </summary>
        public List<Entity> GetContractTiers(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_contracttier", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventorydataloading</para>
        /// </summary>
        public List<Entity> GetInventoryDataLoading(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventorydataloading", "sbt_ownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventorydataloading</para>
        /// </summary>
        public List<Entity> GetInventoryDataLoading(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventorydataloading", "sbt_ownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventoryitem</para>
        /// </summary>
        public List<Entity> GetInventoryItems(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitem", "sbt_ownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventoryitem</para>
        /// </summary>
        public List<Entity> GetInventoryItems(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitem", "sbt_ownershipid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_billing_sbt_inventoryitem</para>
        /// </summary>
        public List<Entity> GetInventoryItems2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitem", "sbt_billingid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_billing_sbt_inventoryitem</para>
        /// </summary>
        public List<Entity> GetInventoryItems2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitem", "sbt_billingid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventoryitemmanagement</para>
        /// </summary>
        public List<Entity> GetInventoryItemManagement(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitemmanagement", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_inventoryitemmanagement</para>
        /// </summary>
        public List<Entity> GetInventoryItemManagement(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_inventoryitemmanagement", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_miscellaneouscharge_Account</para>
        /// </summary>
        public List<Entity> GetMiscellaneousCharges(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_miscellaneouscharge", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_miscellaneouscharge_Account</para>
        /// </summary>
        public List<Entity> GetMiscellaneousCharges(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_miscellaneouscharge", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_payment_Account</para>
        /// </summary>
        public List<Entity> GetPayments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_payment", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_payment_Account</para>
        /// </summary>
        public List<Entity> GetPayments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_payment", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_plan_Account</para>
        /// </summary>
        public List<Entity> GetPlans(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_plan", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_plan_Account</para>
        /// </summary>
        public List<Entity> GetPlans(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_plan", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planallocation</para>
        /// </summary>
        public List<Entity> GetPlanAllocation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planallocation", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planallocation</para>
        /// </summary>
        public List<Entity> GetPlanAllocation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planallocation", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planchange</para>
        /// </summary>
        public List<Entity> GetPlanChange(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planchange", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planchange</para>
        /// </summary>
        public List<Entity> GetPlanChange(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planchange", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planconfigurationaudit</para>
        /// </summary>
        public List<Entity> GetPlanConfigurationAudit(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planconfigurationaudit", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planconfigurationaudit</para>
        /// </summary>
        public List<Entity> GetPlanConfigurationAudit(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planconfigurationaudit", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planpool_Account</para>
        /// </summary>
        public List<Entity> GetPlanPool(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planpool", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_planpool_Account</para>
        /// </summary>
        public List<Entity> GetPlanPool(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_planpool", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_salesdata</para>
        /// </summary>
        public List<Entity> GetSalesData(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_salesdata", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_salesdata</para>
        /// </summary>
        public List<Entity> GetSalesData(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_salesdata", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_service_Account</para>
        /// </summary>
        public List<Entity> GetServices(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_service", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_service_Account</para>
        /// </summary>
        public List<Entity> GetServices(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_service", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_serviceplan_Account</para>
        /// </summary>
        public List<Entity> GetServicePlans(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_serviceplan", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_serviceplan_Account</para>
        /// </summary>
        public List<Entity> GetServicePlans(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_serviceplan", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_sharedplan</para>
        /// </summary>
        public List<Entity> GetSharedPlans(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_sharedplan", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_sharedplan</para>
        /// </summary>
        public List<Entity> GetSharedPlans(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_sharedplan", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sim_Account</para>
        /// </summary>
        public List<Entity> GetSIMs(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_sim", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sim_Account</para>
        /// </summary>
        public List<Entity> GetSIMs(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_sim", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simplanhistory</para>
        /// </summary>
        public List<Entity> GetSIMPlanHistory(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simplanhistory", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simplanhistory</para>
        /// </summary>
        public List<Entity> GetSIMPlanHistory(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simplanhistory", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simprojection</para>
        /// </summary>
        public List<Entity> GetSIMProjections(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simprojection", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simprojection</para>
        /// </summary>
        public List<Entity> GetSIMProjections(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simprojection", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simsummary</para>
        /// </summary>
        public List<Entity> GetSIMSummary(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simsummary", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_simsummary</para>
        /// </summary>
        public List<Entity> GetSIMSummary(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_simsummary", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_tariff</para>
        /// </summary>
        public List<Entity> GetTariffs(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_tariff", "sbt_account_tariffid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_sbt_tariff</para>
        /// </summary>
        public List<Entity> GetTariffs(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_tariff", "sbt_account_tariffid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_unbilledcharges</para>
        /// </summary>
        public List<Entity> GetUnbilledCharges(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_unbilledcharges", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_unbilledcharges</para>
        /// </summary>
        public List<Entity> GetUnbilledCharges(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_unbilledcharges", "sbt_accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_usage_Account</para>
        /// </summary>
        public List<Entity> GetUsages(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_usage", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: sbt_account_usage_Account</para>
        /// </summary>
        public List<Entity> GetUsages(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sbt_usage", "sbt_account", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetServiceActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetServiceActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocument</para>
        /// </summary>
        public List<Entity> GetDocuments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocument", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocument</para>
        /// </summary>
        public List<Entity> GetDocuments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocument", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocumentLocation</para>
        /// </summary>
        public List<Entity> GetDocumentLocations(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocumentlocation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocumentLocation</para>
        /// </summary>
        public List<Entity> GetDocumentLocations(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocumentlocation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_account</para>
        /// </summary>
        public List<Entity> GetSLAKPIInstances(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_account</para>
        /// </summary>
        public List<Entity> GetSLAKPIInstances(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SocialActivities</para>
        /// </summary>
        public List<Entity> GetSocialActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SocialActivities</para>
        /// </summary>
        public List<Entity> GetSocialActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthor_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivities2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthor", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthor_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivities2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthor", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthorAccount_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivities3(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthoraccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthorAccount_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivities3(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthoraccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Socialprofile_customer_accounts</para>
        /// </summary>
        public List<Entity> GetSocialProfiles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialprofile", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Socialprofile_customer_accounts</para>
        /// </summary>
        public List<Entity> GetSocialProfiles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialprofile", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SyncErrors</para>
        /// </summary>
        public List<Entity> GetSyncErrors(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SyncErrors</para>
        /// </summary>
        public List<Entity> GetSyncErrors(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Tasks</para>
        /// </summary>
        public List<Entity> GetTasks(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Tasks</para>
        /// </summary>
        public List<Entity> GetTasks(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_account</para>
        /// </summary>
        public List<Entity> GetUserEntityInstanceData(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_account</para>
        /// </summary>
        public List<Entity> GetUserEntityInstanceData(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }


        /// <summary>
        /// <para>Related Entity: <b>Lead</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: accountleads_association</para>
        /// </summary>
        public List<Entity> GetLeads3(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "lead", "leadid", "accountleads", "accountid", "leadid", columns); }
        public List<Entity> GetLeads3(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "lead", "leadid", "accountleads", "accountid", "leadid", columns); }
        public void RelateLeads3(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "accountleads_association", items); }
        public void RelateLeads3(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "accountleads_association", items); }
        public void UnRelateLeads3(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "accountleads_association", items); }
        public void UnRelateLeads3(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "accountleads_association", items); }
        /// <summary>
        /// <para>Related Entity: <b>Marketing List</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: listaccount_association</para>
        /// </summary>
        public List<Entity> GetMarketingLists(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "list", "listid", "listmember", "entityid", "listid", columns); }
        public List<Entity> GetMarketingLists(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "list", "listid", "listmember", "entityid", "listid", columns); }
        public void RelateMarketingLists(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "listaccount_association", items); }
        public void RelateMarketingLists(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "listaccount_association", items); }
        public void UnRelateMarketingLists(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "listaccount_association", items); }
        public void UnRelateMarketingLists(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "listaccount_association", items); }
        /// <summary>
        /// <para>Related Entity: <b>Product</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: sbt_product_account</para>
        /// </summary>
        public List<Entity> GetProducts3(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "product", "productid", "sbt_product_account", "accountid", "productid", columns); }
        public List<Entity> GetProducts3(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "product", "productid", "sbt_product_account", "accountid", "productid", columns); }
        public void RelateProducts3(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "sbt_product_account", items); }
        public void RelateProducts3(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "sbt_product_account", items); }
        public void UnRelateProducts3(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "sbt_product_account", items); }
        public void UnRelateProducts3(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "sbt_product_account", items); }
        /// <summary>
        /// <para>Related Entity: <b>Portal Alert Template</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: sbt_sbt_portalalerttemplate_account</para>
        /// </summary>
        public List<Entity> GetPortalAlertTemplates(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "sbt_portalalerttemplate", "sbt_portalalerttemplateid", "sbt_sbt_portalalerttemplate_account", "accountid", "sbt_portalalerttemplateid", columns); }
        public List<Entity> GetPortalAlertTemplates(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "sbt_portalalerttemplate", "sbt_portalalerttemplateid", "sbt_sbt_portalalerttemplate_account", "accountid", "sbt_portalalerttemplateid", columns); }
        public void RelatePortalAlertTemplates(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "sbt_sbt_portalalerttemplate_account", items); }
        public void RelatePortalAlertTemplates(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "sbt_sbt_portalalerttemplate_account", items); }
        public void UnRelatePortalAlertTemplates(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "sbt_sbt_portalalerttemplate_account", items); }
        public void UnRelatePortalAlertTemplates(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "sbt_sbt_portalalerttemplate_account", items); }

        
        
        public static class Properties
        {
            /// <summary>
            /// <para>ABN</para>
            /// <para>Logical Name = sbt_abn</para>
            /// </summary>
            public const string ABN = "sbt_abn";

            /// <summary>
            /// <para>Account</para>
            /// <para>Logical Name = accountid</para>
            /// </summary>
            public const string AccountId2 = "accountid";

            /// <summary>
            /// <para>Account Id</para>
            /// <para>Logical Name = sbt_externalid</para>
            /// </summary>
            public const string AccountId = "sbt_externalid";

            /// <summary>
            /// <para>Account Name</para>
            /// <para>Logical Name = name</para>
            /// </summary>
            public const string AccountName = "name";

            /// <summary>
            /// <para>Account Rating</para>
            /// <para>Logical Name = accountratingcode</para>
            /// </summary>
            public const string AccountRating = "accountratingcode";

            /// <summary>
            /// <para>Account Status</para>
            /// <para>Logical Name = sbt_accountstatus</para>
            /// </summary>
            public const string AccountStatus = "sbt_accountstatus";

            /// <summary>
            /// <para>Account Type</para>
            /// <para>Logical Name = sbt_accounttype</para>
            /// </summary>
            public const string AccountType = "sbt_accounttype";

            /// <summary>
            /// <para>Logical Name = accountcategorycodename</para>
            /// </summary>
            public const string AccountCategoryCodeName = "accountcategorycodename";

            /// <summary>
            /// <para>Logical Name = accountclassificationcodename</para>
            /// </summary>
            public const string AccountClassificationCodeName = "accountclassificationcodename";

            /// <summary>
            /// <para>Logical Name = accountratingcodename</para>
            /// </summary>
            public const string AccountRatingCodeName = "accountratingcodename";

            /// <summary>
            /// <para>Accounts Payable Email</para>
            /// <para>Logical Name = ops_accountspayableemail</para>
            /// </summary>
            public const string AccountsPayableEmail = "ops_accountspayableemail";

            /// <summary>
            /// <para>Accounts Payable Email 2</para>
            /// <para>Logical Name = sbt_accountspayableemail2</para>
            /// </summary>
            public const string AccountsPayableEmail2 = "sbt_accountspayableemail2";

            /// <summary>
            /// <para>Accounts Payable Email 3</para>
            /// <para>Logical Name = sbt_accountspayableemail3</para>
            /// </summary>
            public const string AccountsPayableEmail3 = "sbt_accountspayableemail3";

            /// <summary>
            /// <para>Accounts Payable Email 4</para>
            /// <para>Logical Name = sbt_accountspayableemail4</para>
            /// </summary>
            public const string AccountsPayableEmail4 = "sbt_accountspayableemail4";

            /// <summary>
            /// <para>ACN</para>
            /// <para>Logical Name = sbt_acn</para>
            /// </summary>
            public const string ACN = "sbt_acn";

            /// <summary>
            /// <para>Activated Sims Actual</para>
            /// <para>Logical Name = sbt_activatedsimsactual</para>
            /// </summary>
            public const string ActivatedSimsActual = "sbt_activatedsimsactual";

            /// <summary>
            /// <para>Activated SIMs Commitment</para>
            /// <para>Logical Name = sbt_projectedsims</para>
            /// </summary>
            public const string ActivatedSIMsCommitment = "sbt_projectedsims";

            /// <summary>
            /// <para>Address 1</para>
            /// <para>Logical Name = address1_composite</para>
            /// </summary>
            public const string Address1 = "address1_composite";

            /// <summary>
            /// <para>Address 1: Address Type</para>
            /// <para>Logical Name = address1_addresstypecode</para>
            /// </summary>
            public const string Address1_AddressType = "address1_addresstypecode";

            /// <summary>
            /// <para>Address 1: City</para>
            /// <para>Logical Name = address1_city</para>
            /// </summary>
            public const string Address1_City = "address1_city";

            /// <summary>
            /// <para>Address 1: Country/Region</para>
            /// <para>Logical Name = address1_country</para>
            /// </summary>
            public const string Address1_Country_Region = "address1_country";

            /// <summary>
            /// <para>Address 1: County</para>
            /// <para>Logical Name = address1_county</para>
            /// </summary>
            public const string Address1_County = "address1_county";

            /// <summary>
            /// <para>Address 1: Fax</para>
            /// <para>Logical Name = address1_fax</para>
            /// </summary>
            public const string Address1_Fax = "address1_fax";

            /// <summary>
            /// <para>Address 1: Freight Terms</para>
            /// <para>Logical Name = address1_freighttermscode</para>
            /// </summary>
            public const string Address1_FreightTerms = "address1_freighttermscode";

            /// <summary>
            /// <para>Address 1: ID</para>
            /// <para>Logical Name = address1_addressid</para>
            /// </summary>
            public const string Address1_ID = "address1_addressid";

            /// <summary>
            /// <para>Address 1: Latitude</para>
            /// <para>Logical Name = address1_latitude</para>
            /// </summary>
            public const string Address1_Latitude = "address1_latitude";

            /// <summary>
            /// <para>Address 1: Longitude</para>
            /// <para>Logical Name = address1_longitude</para>
            /// </summary>
            public const string Address1_Longitude = "address1_longitude";

            /// <summary>
            /// <para>Address 1: Name</para>
            /// <para>Logical Name = address1_name</para>
            /// </summary>
            public const string Address1_Name = "address1_name";

            /// <summary>
            /// <para>Address 1: Post Office Box</para>
            /// <para>Logical Name = address1_postofficebox</para>
            /// </summary>
            public const string Address1_PostOfficeBox = "address1_postofficebox";

            /// <summary>
            /// <para>Address 1: Primary Contact Name</para>
            /// <para>Logical Name = address1_primarycontactname</para>
            /// </summary>
            public const string Address1_PrimaryContactName = "address1_primarycontactname";

            /// <summary>
            /// <para>Address 1: Shipping Method</para>
            /// <para>Logical Name = address1_shippingmethodcode</para>
            /// </summary>
            public const string Address1_ShippingMethod = "address1_shippingmethodcode";

            /// <summary>
            /// <para>Address 1: State/Province</para>
            /// <para>Logical Name = address1_stateorprovince</para>
            /// </summary>
            public const string Address1_State_Province = "address1_stateorprovince";

            /// <summary>
            /// <para>Address 1: Street 1</para>
            /// <para>Logical Name = address1_line1</para>
            /// </summary>
            public const string Address1_Street1 = "address1_line1";

            /// <summary>
            /// <para>Address 1: Street 2</para>
            /// <para>Logical Name = address1_line2</para>
            /// </summary>
            public const string Address1_Street2 = "address1_line2";

            /// <summary>
            /// <para>Address 1: Street 3</para>
            /// <para>Logical Name = address1_line3</para>
            /// </summary>
            public const string Address1_Street3 = "address1_line3";

            /// <summary>
            /// <para>Address 1: Telephone 2</para>
            /// <para>Logical Name = address1_telephone2</para>
            /// </summary>
            public const string Address1_Telephone2 = "address1_telephone2";

            /// <summary>
            /// <para>Address 1: Telephone 3</para>
            /// <para>Logical Name = address1_telephone3</para>
            /// </summary>
            public const string Address1_Telephone3 = "address1_telephone3";

            /// <summary>
            /// <para>Address 1: UPS Zone</para>
            /// <para>Logical Name = address1_upszone</para>
            /// </summary>
            public const string Address1_UPSZone = "address1_upszone";

            /// <summary>
            /// <para>Address 1: UTC Offset</para>
            /// <para>Logical Name = address1_utcoffset</para>
            /// </summary>
            public const string Address1_UTCOffset = "address1_utcoffset";

            /// <summary>
            /// <para>Address 1: ZIP/Postal Code</para>
            /// <para>Logical Name = address1_postalcode</para>
            /// </summary>
            public const string Address1_ZIP_PostalCode = "address1_postalcode";

            /// <summary>
            /// <para>Address 2</para>
            /// <para>Logical Name = address2_composite</para>
            /// </summary>
            public const string Address2 = "address2_composite";

            /// <summary>
            /// <para>Address 2: Address Type</para>
            /// <para>Logical Name = address2_addresstypecode</para>
            /// </summary>
            public const string Address2_AddressType = "address2_addresstypecode";

            /// <summary>
            /// <para>Address 2: City</para>
            /// <para>Logical Name = address2_city</para>
            /// </summary>
            public const string Address2_City = "address2_city";

            /// <summary>
            /// <para>Address 2: Country/Region</para>
            /// <para>Logical Name = address2_country</para>
            /// </summary>
            public const string Address2_Country_Region = "address2_country";

            /// <summary>
            /// <para>Address 2: County</para>
            /// <para>Logical Name = address2_county</para>
            /// </summary>
            public const string Address2_County = "address2_county";

            /// <summary>
            /// <para>Address 2: Fax</para>
            /// <para>Logical Name = address2_fax</para>
            /// </summary>
            public const string Address2_Fax = "address2_fax";

            /// <summary>
            /// <para>Address 2: Freight Terms</para>
            /// <para>Logical Name = address2_freighttermscode</para>
            /// </summary>
            public const string Address2_FreightTerms = "address2_freighttermscode";

            /// <summary>
            /// <para>Address 2: ID</para>
            /// <para>Logical Name = address2_addressid</para>
            /// </summary>
            public const string Address2_ID = "address2_addressid";

            /// <summary>
            /// <para>Address 2: Latitude</para>
            /// <para>Logical Name = address2_latitude</para>
            /// </summary>
            public const string Address2_Latitude = "address2_latitude";

            /// <summary>
            /// <para>Address 2: Longitude</para>
            /// <para>Logical Name = address2_longitude</para>
            /// </summary>
            public const string Address2_Longitude = "address2_longitude";

            /// <summary>
            /// <para>Address 2: Name</para>
            /// <para>Logical Name = address2_name</para>
            /// </summary>
            public const string Address2_Name = "address2_name";

            /// <summary>
            /// <para>Address 2: Post Office Box</para>
            /// <para>Logical Name = address2_postofficebox</para>
            /// </summary>
            public const string Address2_PostOfficeBox = "address2_postofficebox";

            /// <summary>
            /// <para>Address 2: Primary Contact Name</para>
            /// <para>Logical Name = address2_primarycontactname</para>
            /// </summary>
            public const string Address2_PrimaryContactName = "address2_primarycontactname";

            /// <summary>
            /// <para>Address 2: Shipping Method</para>
            /// <para>Logical Name = address2_shippingmethodcode</para>
            /// </summary>
            public const string Address2_ShippingMethod = "address2_shippingmethodcode";

            /// <summary>
            /// <para>Address 2: State/Province</para>
            /// <para>Logical Name = address2_stateorprovince</para>
            /// </summary>
            public const string Address2_State_Province = "address2_stateorprovince";

            /// <summary>
            /// <para>Address 2: Street 1</para>
            /// <para>Logical Name = address2_line1</para>
            /// </summary>
            public const string Address2_Street1 = "address2_line1";

            /// <summary>
            /// <para>Address 2: Street 2</para>
            /// <para>Logical Name = address2_line2</para>
            /// </summary>
            public const string Address2_Street2 = "address2_line2";

            /// <summary>
            /// <para>Address 2: Street 3</para>
            /// <para>Logical Name = address2_line3</para>
            /// </summary>
            public const string Address2_Street3 = "address2_line3";

            /// <summary>
            /// <para>Address 2: Telephone 1</para>
            /// <para>Logical Name = address2_telephone1</para>
            /// </summary>
            public const string Address2_Telephone1 = "address2_telephone1";

            /// <summary>
            /// <para>Address 2: Telephone 2</para>
            /// <para>Logical Name = address2_telephone2</para>
            /// </summary>
            public const string Address2_Telephone2 = "address2_telephone2";

            /// <summary>
            /// <para>Address 2: Telephone 3</para>
            /// <para>Logical Name = address2_telephone3</para>
            /// </summary>
            public const string Address2_Telephone3 = "address2_telephone3";

            /// <summary>
            /// <para>Address 2: UPS Zone</para>
            /// <para>Logical Name = address2_upszone</para>
            /// </summary>
            public const string Address2_UPSZone = "address2_upszone";

            /// <summary>
            /// <para>Address 2: UTC Offset</para>
            /// <para>Logical Name = address2_utcoffset</para>
            /// </summary>
            public const string Address2_UTCOffset = "address2_utcoffset";

            /// <summary>
            /// <para>Address 2: ZIP/Postal Code</para>
            /// <para>Logical Name = address2_postalcode</para>
            /// </summary>
            public const string Address2_ZIP_PostalCode = "address2_postalcode";

            /// <summary>
            /// <para>Address Phone</para>
            /// <para>Logical Name = address1_telephone1</para>
            /// </summary>
            public const string AddressPhone = "address1_telephone1";

            /// <summary>
            /// <para>Logical Name = address1_addresstypecodename</para>
            /// </summary>
            public const string Address1_AddressTypeCodeName = "address1_addresstypecodename";

            /// <summary>
            /// <para>Logical Name = address1_freighttermscodename</para>
            /// </summary>
            public const string Address1_FreightTermsCodeName = "address1_freighttermscodename";

            /// <summary>
            /// <para>Logical Name = address1_shippingmethodcodename</para>
            /// </summary>
            public const string Address1_ShippingMethodCodeName = "address1_shippingmethodcodename";

            /// <summary>
            /// <para>Logical Name = address2_addresstypecodename</para>
            /// </summary>
            public const string Address2_AddressTypeCodeName = "address2_addresstypecodename";

            /// <summary>
            /// <para>Logical Name = address2_freighttermscodename</para>
            /// </summary>
            public const string Address2_FreightTermsCodeName = "address2_freighttermscodename";

            /// <summary>
            /// <para>Logical Name = address2_shippingmethodcodename</para>
            /// </summary>
            public const string Address2_ShippingMethodCodeName = "address2_shippingmethodcodename";

            /// <summary>
            /// <para>Aging 30</para>
            /// <para>Logical Name = aging30</para>
            /// </summary>
            public const string Aging30 = "aging30";

            /// <summary>
            /// <para>Aging 30 (Base)</para>
            /// <para>Logical Name = aging30_base</para>
            /// </summary>
            public const string Aging30_Base = "aging30_base";

            /// <summary>
            /// <para>Aging 60</para>
            /// <para>Logical Name = aging60</para>
            /// </summary>
            public const string Aging60 = "aging60";

            /// <summary>
            /// <para>Aging 60 (Base)</para>
            /// <para>Logical Name = aging60_base</para>
            /// </summary>
            public const string Aging60_Base = "aging60_base";

            /// <summary>
            /// <para>Aging 90</para>
            /// <para>Logical Name = aging90</para>
            /// </summary>
            public const string Aging90 = "aging90";

            /// <summary>
            /// <para>Aging 90 (Base)</para>
            /// <para>Logical Name = aging90_base</para>
            /// </summary>
            public const string Aging90_Base = "aging90_base";

            /// <summary>
            /// <para>Annual Revenue</para>
            /// <para>Logical Name = revenue</para>
            /// </summary>
            public const string AnnualRevenue = "revenue";

            /// <summary>
            /// <para>Annual Revenue (Base)</para>
            /// <para>Logical Name = revenue_base</para>
            /// </summary>
            public const string AnnualRevenue_Base = "revenue_base";

            /// <summary>
            /// <para>API</para>
            /// <para>Logical Name = sbt_ss_api</para>
            /// </summary>
            public const string API = "sbt_ss_api";

            /// <summary>
            /// <para>APN</para>
            /// <para>Logical Name = sbt_apn</para>
            /// </summary>
            public const string APN = "sbt_apn";

            /// <summary>
            /// <para>Apply GST</para>
            /// <para>Logical Name = sbt_applygst</para>
            /// </summary>
            public const string ApplyGST = "sbt_applygst";

            /// <summary>
            /// <para>Auto Send</para>
            /// <para>Logical Name = sbt_autosend</para>
            /// </summary>
            public const string AutoSend = "sbt_autosend";

            /// <summary>
            /// <para>Balance Overdue</para>
            /// <para>Logical Name = sbt_balanceoverdue</para>
            /// </summary>
            public const string BalanceOverdue = "sbt_balanceoverdue";

            /// <summary>
            /// <para>Balance Overdue (Base)</para>
            /// <para>Logical Name = sbt_balanceoverdue_base</para>
            /// </summary>
            public const string BalanceOverdue_Base = "sbt_balanceoverdue_base";

            /// <summary>
            /// <para>Billing Enable</para>
            /// <para>Logical Name = sbt_billingenable</para>
            /// </summary>
            public const string BillingEnable = "sbt_billingenable";

            /// <summary>
            /// <para>Business Type</para>
            /// <para>Logical Name = businesstypecode</para>
            /// </summary>
            public const string BusinessType = "businesstypecode";

            /// <summary>
            /// <para>Logical Name = businesstypecodename</para>
            /// </summary>
            public const string BusinessTypeCodeName = "businesstypecodename";

            /// <summary>
            /// <para>Catch All Tariff Enable</para>
            /// <para>Logical Name = sbt_catchallenable</para>
            /// </summary>
            public const string CatchAllTariffEnable = "sbt_catchallenable";

            /// <summary>
            /// <para>Category</para>
            /// <para>Logical Name = accountcategorycode</para>
            /// </summary>
            public const string Category = "accountcategorycode";

            /// <summary>
            /// <para>Charge Type</para>
            /// <para>Logical Name = sbt_chargetype</para>
            /// </summary>
            public const string ChargeType = "sbt_chargetype";

            /// <summary>
            /// <para>Classification</para>
            /// <para>Logical Name = accountclassificationcode</para>
            /// </summary>
            public const string Classification = "accountclassificationcode";

            /// <summary>
            /// <para>Company Size</para>
            /// <para>Logical Name = sbt_companysize</para>
            /// </summary>
            public const string CompanySize = "sbt_companysize";

            /// <summary>
            /// <para>ConnectivityToCustomerPremises</para>
            /// <para>Logical Name = sbt_connectivitytocustomerpremises</para>
            /// </summary>
            public const string ConnectivityToCustomerPremises = "sbt_connectivitytocustomerpremises";

            /// <summary>
            /// <para>ConnectivityToCustomerPremisesValue</para>
            /// <para>Logical Name = sbt_connectivitytocustomerpremisesvalue</para>
            /// </summary>
            public const string ConnectivityToCustomerPremisesValue = "sbt_connectivitytocustomerpremisesvalue";

            /// <summary>
            /// <para>Contract End Date</para>
            /// <para>Logical Name = sbt_contractenddate</para>
            /// </summary>
            public const string ContractEndDate = "sbt_contractenddate";

            /// <summary>
            /// <para>Contract Signed Date</para>
            /// <para>Logical Name = sbt_contractsigneddate</para>
            /// </summary>
            public const string ContractSignedDate = "sbt_contractsigneddate";

            /// <summary>
            /// <para>Contract Start Date</para>
            /// <para>Logical Name = sbt_contractstartdate</para>
            /// </summary>
            public const string ContractStartDate = "sbt_contractstartdate";

            /// <summary>
            /// <para>Created By</para>
            /// <para>Logical Name = createdby</para>
            /// </summary>
            public const string CreatedBy = "createdby";

            /// <summary>
            /// <para>Created By (Delegate)</para>
            /// <para>Logical Name = createdonbehalfby</para>
            /// </summary>
            public const string CreatedBy_Delegate = "createdonbehalfby";

            /// <summary>
            /// <para>Created By (External Party)</para>
            /// <para>Logical Name = createdbyexternalparty</para>
            /// </summary>
            public const string CreatedBy_ExternalParty = "createdbyexternalparty";

            /// <summary>
            /// <para>Created On</para>
            /// <para>Logical Name = createdon</para>
            /// </summary>
            public const string CreatedOn = "createdon";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyname</para>
            /// </summary>
            public const string CreatedByExternalPartyName = "createdbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyyominame</para>
            /// </summary>
            public const string CreatedByExternalPartyYomiName = "createdbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = createdbyname</para>
            /// </summary>
            public const string CreatedByName = "createdbyname";

            /// <summary>
            /// <para>Logical Name = createdbyyominame</para>
            /// </summary>
            public const string CreatedByYomiName = "createdbyyominame";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyname</para>
            /// </summary>
            public const string CreatedOnBehalfByName = "createdonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyyominame</para>
            /// </summary>
            public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";

            /// <summary>
            /// <para>Credit Hold</para>
            /// <para>Logical Name = creditonhold</para>
            /// </summary>
            public const string CreditHold = "creditonhold";

            /// <summary>
            /// <para>Credit Limit</para>
            /// <para>Logical Name = creditlimit</para>
            /// </summary>
            public const string CreditLimit = "creditlimit";

            /// <summary>
            /// <para>Credit Limit (Base)</para>
            /// <para>Logical Name = creditlimit_base</para>
            /// </summary>
            public const string CreditLimit_Base = "creditlimit_base";

            /// <summary>
            /// <para>Logical Name = creditonholdname</para>
            /// </summary>
            public const string CreditOnHoldName = "creditonholdname";

            /// <summary>
            /// <para>Currency</para>
            /// <para>Logical Name = transactioncurrencyid</para>
            /// </summary>
            public const string Currency = "transactioncurrencyid";

            /// <summary>
            /// <para>Current Performance Rate</para>
            /// <para>Logical Name = sbt_currentperformancerate</para>
            /// </summary>
            public const string CurrentPerformanceRate = "sbt_currentperformancerate";

            /// <summary>
            /// <para>Customer Size</para>
            /// <para>Logical Name = customersizecode</para>
            /// </summary>
            public const string CustomerSize = "customersizecode";

            /// <summary>
            /// <para>Logical Name = customersizecodename</para>
            /// </summary>
            public const string CustomerSizeCodeName = "customersizecodename";

            /// <summary>
            /// <para>Logical Name = customertypecodename</para>
            /// </summary>
            public const string CustomerTypeCodeName = "customertypecodename";

            /// <summary>
            /// <para>Data</para>
            /// <para>Logical Name = sbt_ss_data</para>
            /// </summary>
            public const string Data = "sbt_ss_data";

            /// <summary>
            /// <para>Date SSL certificate sent to Customer</para>
            /// <para>Logical Name = sbt_datesslcertificatesenttocustomer</para>
            /// </summary>
            public const string DateSSLCertificateSentToCustomer = "sbt_datesslcertificatesenttocustomer";

            /// <summary>
            /// <para>Deactivated Date</para>
            /// <para>Logical Name = sbt_deactivateddate</para>
            /// </summary>
            public const string DeactivatedDate = "sbt_deactivateddate";

            /// <summary>
            /// <para>Default Image</para>
            /// <para>Logical Name = entityimage</para>
            /// </summary>
            public const string DefaultImage = "entityimage";

            /// <summary>
            /// <para>Default Plan</para>
            /// <para>Logical Name = sbt_defaultplan</para>
            /// </summary>
            public const string DefaultPlan = "sbt_defaultplan";

            /// <summary>
            /// <para>Logical Name = defaultpricelevelidname</para>
            /// </summary>
            public const string DefaultPriceLevelIdName = "defaultpricelevelidname";

            /// <summary>
            /// <para>Description</para>
            /// <para>Logical Name = description</para>
            /// </summary>
            public const string Description = "description";

            /// <summary>
            /// <para>Do not allow Bulk Emails</para>
            /// <para>Logical Name = donotbulkemail</para>
            /// </summary>
            public const string DoNotAllowBulkEmails = "donotbulkemail";

            /// <summary>
            /// <para>Do not allow Bulk Mails</para>
            /// <para>Logical Name = donotbulkpostalmail</para>
            /// </summary>
            public const string DoNotAllowBulkMails = "donotbulkpostalmail";

            /// <summary>
            /// <para>Do not allow Emails</para>
            /// <para>Logical Name = donotemail</para>
            /// </summary>
            public const string DoNotAllowEmails = "donotemail";

            /// <summary>
            /// <para>Do not allow Faxes</para>
            /// <para>Logical Name = donotfax</para>
            /// </summary>
            public const string DoNotAllowFaxes = "donotfax";

            /// <summary>
            /// <para>Do not allow Mails</para>
            /// <para>Logical Name = donotpostalmail</para>
            /// </summary>
            public const string DoNotAllowMails = "donotpostalmail";

            /// <summary>
            /// <para>Do not allow Phone Calls</para>
            /// <para>Logical Name = donotphone</para>
            /// </summary>
            public const string DoNotAllowPhoneCalls = "donotphone";

            /// <summary>
            /// <para>Logical Name = donotbulkemailname</para>
            /// </summary>
            public const string DoNotBulkEMailName = "donotbulkemailname";

            /// <summary>
            /// <para>Logical Name = donotbulkpostalmailname</para>
            /// </summary>
            public const string DoNotBulkPostalMailName = "donotbulkpostalmailname";

            /// <summary>
            /// <para>Logical Name = donotemailname</para>
            /// </summary>
            public const string DoNotEMailName = "donotemailname";

            /// <summary>
            /// <para>Logical Name = donotfaxname</para>
            /// </summary>
            public const string DoNotFaxName = "donotfaxname";

            /// <summary>
            /// <para>Logical Name = donotphonename</para>
            /// </summary>
            public const string DoNotPhoneName = "donotphonename";

            /// <summary>
            /// <para>Logical Name = donotpostalmailname</para>
            /// </summary>
            public const string DoNotPostalMailName = "donotpostalmailname";

            /// <summary>
            /// <para>Logical Name = donotsendmarketingmaterialname</para>
            /// </summary>
            public const string DoNotSendMarketingMaterialName = "donotsendmarketingmaterialname";

            /// <summary>
            /// <para>Email</para>
            /// <para>Logical Name = emailaddress1</para>
            /// </summary>
            public const string Email = "emailaddress1";

            /// <summary>
            /// <para>Email Address 2</para>
            /// <para>Logical Name = emailaddress2</para>
            /// </summary>
            public const string EmailAddress2 = "emailaddress2";

            /// <summary>
            /// <para>Email Address 3</para>
            /// <para>Logical Name = emailaddress3</para>
            /// </summary>
            public const string EmailAddress3 = "emailaddress3";

            /// <summary>
            /// <para>Entity Image Id</para>
            /// <para>Logical Name = entityimageid</para>
            /// </summary>
            public const string EntityImageId = "entityimageid";

            /// <summary>
            /// <para>Logical Name = entityimage_timestamp</para>
            /// </summary>
            public const string EntityImage_Timestamp = "entityimage_timestamp";

            /// <summary>
            /// <para>Logical Name = entityimage_url</para>
            /// </summary>
            public const string EntityImage_URL = "entityimage_url";

            /// <summary>
            /// <para>Exchange Rate</para>
            /// <para>Logical Name = exchangerate</para>
            /// </summary>
            public const string ExchangeRate = "exchangerate";

            /// <summary>
            /// <para>Fax</para>
            /// <para>Logical Name = fax</para>
            /// </summary>
            public const string Fax = "fax";

            /// <summary>
            /// <para>Fixed line services</para>
            /// <para>Logical Name = sbt_cp_fixedlineservices</para>
            /// </summary>
            public const string FixedLineServices = "sbt_cp_fixedlineservices";

            /// <summary>
            /// <para>Follow Email Activity</para>
            /// <para>Logical Name = followemail</para>
            /// </summary>
            public const string FollowEmailActivity = "followemail";

            /// <summary>
            /// <para>Logical Name = followemailname</para>
            /// </summary>
            public const string FollowEmailName = "followemailname";

            /// <summary>
            /// <para>FTP Site</para>
            /// <para>Logical Name = ftpsiteurl</para>
            /// </summary>
            public const string FTPSite = "ftpsiteurl";

            /// <summary>
            /// <para>GDSP Code</para>
            /// <para>Logical Name = accountnumber</para>
            /// </summary>
            public const string GDSPCode = "accountnumber";

            /// <summary>
            /// <para>GDSP ID</para>
            /// <para>Logical Name = sbt_customerid</para>
            /// </summary>
            public const string GDSPID = "sbt_customerid";

            /// <summary>
            /// <para>GUI</para>
            /// <para>Logical Name = sbt_ss_gui</para>
            /// </summary>
            public const string GUI = "sbt_ss_gui";

            /// <summary>
            /// <para>Import Sequence Number</para>
            /// <para>Logical Name = importsequencenumber</para>
            /// </summary>
            public const string ImportSequenceNumber = "importsequencenumber";

            /// <summary>
            /// <para>Industry</para>
            /// <para>Logical Name = industrycode</para>
            /// </summary>
            public const string Industry = "industrycode";

            /// <summary>
            /// <para>Logical Name = industrycodename</para>
            /// </summary>
            public const string IndustryCodeName = "industrycodename";

            /// <summary>
            /// <para>Internet</para>
            /// <para>Logical Name = sbt_cp_internet</para>
            /// </summary>
            public const string Internet = "sbt_cp_internet";

            /// <summary>
            /// <para>Invoice Data Usage Summary by Country Report</para>
            /// <para>Logical Name = sbt_sendreport1</para>
            /// </summary>
            public const string InvoiceDataUsageSummaryByCountryReport = "sbt_sendreport1";

            /// <summary>
            /// <para>Invoice Data Usage Summary by Network Report</para>
            /// <para>Logical Name = sbt_sendreport2</para>
            /// </summary>
            public const string InvoiceDataUsageSummaryByNetworkReport = "sbt_sendreport2";

            /// <summary>
            /// <para>Invoice Data Usage Summary for Uncontracted Networ</para>
            /// <para>Logical Name = sbt_sendreport3</para>
            /// </summary>
            public const string InvoiceDataUsageSummaryForUncontractedNetwor = "sbt_sendreport3";

            /// <summary>
            /// <para>Invoice Service Summary Report</para>
            /// <para>Logical Name = sbt_sendreport4</para>
            /// </summary>
            public const string InvoiceServiceSummaryReport = "sbt_sendreport4";

            /// <summary>
            /// <para>Invoice Service Summary Usage Report</para>
            /// <para>Logical Name = sbt_sendreport5</para>
            /// </summary>
            public const string InvoiceServiceSummaryUsageReport = "sbt_sendreport5";

            /// <summary>
            /// <para>IPSEC</para>
            /// <para>Logical Name = sbt_cp_ipsec</para>
            /// </summary>
            public const string IPSEC = "sbt_cp_ipsec";

            /// <summary>
            /// <para>Is Test Account</para>
            /// <para>Logical Name = sbt_istestaccount</para>
            /// </summary>
            public const string IsTestAccount = "sbt_istestaccount";

            /// <summary>
            /// <para>Logical Name = isprivate</para>
            /// </summary>
            public const string IsPrivate = "isprivate";

            /// <summary>
            /// <para>Logical Name = isprivatename</para>
            /// </summary>
            public const string IsPrivateName = "isprivatename";

            /// <summary>
            /// <para>Last Date Included in Campaign</para>
            /// <para>Logical Name = lastusedincampaign</para>
            /// </summary>
            public const string LastDateIncludedInCampaign = "lastusedincampaign";

            /// <summary>
            /// <para>Last Invoice</para>
            /// <para>Logical Name = ops_lastinvoice</para>
            /// </summary>
            public const string LastInvoice = "ops_lastinvoice";

            /// <summary>
            /// <para>Last Invoice Amount</para>
            /// <para>Logical Name = ops_lastinvoiceamount</para>
            /// </summary>
            public const string LastInvoiceAmount = "ops_lastinvoiceamount";

            /// <summary>
            /// <para>Last Invoice Amount (Base)</para>
            /// <para>Logical Name = ops_lastinvoiceamount_base</para>
            /// </summary>
            public const string LastInvoiceAmount_Base = "ops_lastinvoiceamount_base";

            /// <summary>
            /// <para>Last Invoice Date</para>
            /// <para>Logical Name = ops_lastinvoicedate</para>
            /// </summary>
            public const string LastInvoiceDate = "ops_lastinvoicedate";

            /// <summary>
            /// <para>Last On Hold Time</para>
            /// <para>Logical Name = lastonholdtime</para>
            /// </summary>
            public const string LastOnHoldTime = "lastonholdtime";

            /// <summary>
            /// <para>Last Paid Amount</para>
            /// <para>Logical Name = ops_lastpaidamount</para>
            /// </summary>
            public const string LastPaidAmount = "ops_lastpaidamount";

            /// <summary>
            /// <para>Last Paid Amount (Base)</para>
            /// <para>Logical Name = ops_lastpaidamount_base</para>
            /// </summary>
            public const string LastPaidAmount_Base = "ops_lastpaidamount_base";

            /// <summary>
            /// <para>Last Payment</para>
            /// <para>Logical Name = ops_lastpayment</para>
            /// </summary>
            public const string LastPayment = "ops_lastpayment";

            /// <summary>
            /// <para>Last Payment Date</para>
            /// <para>Logical Name = ops_lastpaymentdate</para>
            /// </summary>
            public const string LastPaymentDate = "ops_lastpaymentdate";

            /// <summary>
            /// <para>Last SLA applied</para>
            /// <para>Logical Name = slainvokedid</para>
            /// </summary>
            public const string LastSLAApplied = "slainvokedid";

            /// <summary>
            /// <para>Main Phone</para>
            /// <para>Logical Name = telephone1</para>
            /// </summary>
            public const string MainPhone = "telephone1";

            /// <summary>
            /// <para>Market Capitalization</para>
            /// <para>Logical Name = marketcap</para>
            /// </summary>
            public const string MarketCapitalization = "marketcap";

            /// <summary>
            /// <para>Market Capitalization (Base)</para>
            /// <para>Logical Name = marketcap_base</para>
            /// </summary>
            public const string MarketCapitalization_Base = "marketcap_base";

            /// <summary>
            /// <para>Marketing Only</para>
            /// <para>Logical Name = marketingonly</para>
            /// </summary>
            public const string MarketingOnly = "marketingonly";

            /// <summary>
            /// <para>Logical Name = marketingonlyname</para>
            /// </summary>
            public const string MarketingOnlyName = "marketingonlyname";

            /// <summary>
            /// <para>Master ID</para>
            /// <para>Logical Name = masterid</para>
            /// </summary>
            public const string MasterID = "masterid";

            /// <summary>
            /// <para>Logical Name = masteraccountidname</para>
            /// </summary>
            public const string MasterAccountIdName = "masteraccountidname";

            /// <summary>
            /// <para>Logical Name = masteraccountidyominame</para>
            /// </summary>
            public const string MasterAccountIdYomiName = "masteraccountidyominame";

            /// <summary>
            /// <para>Merged</para>
            /// <para>Logical Name = merged</para>
            /// </summary>
            public const string Merged = "merged";

            /// <summary>
            /// <para>Logical Name = mergedname</para>
            /// </summary>
            public const string MergedName = "mergedname";

            /// <summary>
            /// <para>Minimum Order Size</para>
            /// <para>Logical Name = sbt_minimumordersize</para>
            /// </summary>
            public const string MinimumOrderSize = "sbt_minimumordersize";

            /// <summary>
            /// <para>Modified By</para>
            /// <para>Logical Name = modifiedby</para>
            /// </summary>
            public const string ModifiedBy = "modifiedby";

            /// <summary>
            /// <para>Modified By (Delegate)</para>
            /// <para>Logical Name = modifiedonbehalfby</para>
            /// </summary>
            public const string ModifiedBy_Delegate = "modifiedonbehalfby";

            /// <summary>
            /// <para>Modified By (External Party)</para>
            /// <para>Logical Name = modifiedbyexternalparty</para>
            /// </summary>
            public const string ModifiedBy_ExternalParty = "modifiedbyexternalparty";

            /// <summary>
            /// <para>Modified On</para>
            /// <para>Logical Name = modifiedon</para>
            /// </summary>
            public const string ModifiedOn = "modifiedon";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyname</para>
            /// </summary>
            public const string ModifiedByExternalPartyName = "modifiedbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyyominame</para>
            /// </summary>
            public const string ModifiedByExternalPartyYomiName = "modifiedbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = modifiedbyname</para>
            /// </summary>
            public const string ModifiedByName = "modifiedbyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyyominame</para>
            /// </summary>
            public const string ModifiedByYomiName = "modifiedbyyominame";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyname</para>
            /// </summary>
            public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyyominame</para>
            /// </summary>
            public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";

            /// <summary>
            /// <para>No. of Employees</para>
            /// <para>Logical Name = numberofemployees</para>
            /// </summary>
            public const string No_OfEmployees = "numberofemployees";

            /// <summary>
            /// <para>On Hold Time (Minutes)</para>
            /// <para>Logical Name = onholdtime</para>
            /// </summary>
            public const string OnHoldTime_Minutes = "onholdtime";

            /// <summary>
            /// <para>Open Deals</para>
            /// <para>Logical Name = opendeals</para>
            /// </summary>
            public const string OpenDeals = "opendeals";

            /// <summary>
            /// <para>Open Deals(Last Updated Time) </para>
            /// <para>Logical Name = opendeals_date</para>
            /// </summary>
            public const string OpenDeals_LastUpdatedTime = "opendeals_date";

            /// <summary>
            /// <para>Open Deals(State)</para>
            /// <para>Logical Name = opendeals_state</para>
            /// </summary>
            public const string OpenDeals_State = "opendeals_state";

            /// <summary>
            /// <para>Open Revenue</para>
            /// <para>Logical Name = openrevenue</para>
            /// </summary>
            public const string OpenRevenue = "openrevenue";

            /// <summary>
            /// <para>Open Revenue (Base)</para>
            /// <para>Logical Name = openrevenue_base</para>
            /// </summary>
            public const string OpenRevenue_Base = "openrevenue_base";

            /// <summary>
            /// <para>Open Revenue(Last Updated Time) </para>
            /// <para>Logical Name = openrevenue_date</para>
            /// </summary>
            public const string OpenRevenue_LastUpdatedTime = "openrevenue_date";

            /// <summary>
            /// <para>Open Revenue(State)</para>
            /// <para>Logical Name = openrevenue_state</para>
            /// </summary>
            public const string OpenRevenue_State = "openrevenue_state";

            /// <summary>
            /// <para>Logical Name = ops_lastinvoicename</para>
            /// </summary>
            public const string Ops_LastInvoiceName = "ops_lastinvoicename";

            /// <summary>
            /// <para>Logical Name = ops_lastpaymentname</para>
            /// </summary>
            public const string Ops_LastPaymentName = "ops_lastpaymentname";

            /// <summary>
            /// <para>Originating Lead</para>
            /// <para>Logical Name = originatingleadid</para>
            /// </summary>
            public const string OriginatingLead = "originatingleadid";

            /// <summary>
            /// <para>Logical Name = originatingleadidname</para>
            /// </summary>
            public const string OriginatingLeadIdName = "originatingleadidname";

            /// <summary>
            /// <para>Logical Name = originatingleadidyominame</para>
            /// </summary>
            public const string OriginatingLeadIdYomiName = "originatingleadidyominame";

            /// <summary>
            /// <para>Other Phone</para>
            /// <para>Logical Name = telephone2</para>
            /// </summary>
            public const string OtherPhone = "telephone2";

            /// <summary>
            /// <para>Outstanding Balance</para>
            /// <para>Logical Name = sbt_outstandingbalance</para>
            /// </summary>
            public const string OutstandingBalance = "sbt_outstandingbalance";

            /// <summary>
            /// <para>Outstanding Balance (Base)</para>
            /// <para>Logical Name = sbt_outstandingbalance_base</para>
            /// </summary>
            public const string OutstandingBalance_Base = "sbt_outstandingbalance_base";

            /// <summary>
            /// <para>Owner</para>
            /// <para>Logical Name = ownerid</para>
            /// </summary>
            public const string Owner = "ownerid";

            /// <summary>
            /// <para>Logical Name = owneridname</para>
            /// </summary>
            public const string OwnerIdName = "owneridname";

            /// <summary>
            /// <para>Logical Name = owneridtype</para>
            /// </summary>
            public const string OwnerIdType = "owneridtype";

            /// <summary>
            /// <para>Logical Name = owneridyominame</para>
            /// </summary>
            public const string OwnerIdYomiName = "owneridyominame";

            /// <summary>
            /// <para>Ownership</para>
            /// <para>Logical Name = ownershipcode</para>
            /// </summary>
            public const string Ownership = "ownershipcode";

            /// <summary>
            /// <para>Logical Name = ownershipcodename</para>
            /// </summary>
            public const string OwnershipCodeName = "ownershipcodename";

            /// <summary>
            /// <para>Owning Business Unit</para>
            /// <para>Logical Name = owningbusinessunit</para>
            /// </summary>
            public const string OwningBusinessUnit = "owningbusinessunit";

            /// <summary>
            /// <para>Owning Team</para>
            /// <para>Logical Name = owningteam</para>
            /// </summary>
            public const string OwningTeam = "owningteam";

            /// <summary>
            /// <para>Owning User</para>
            /// <para>Logical Name = owninguser</para>
            /// </summary>
            public const string OwningUser = "owninguser";

            /// <summary>
            /// <para>Parent Account</para>
            /// <para>Logical Name = parentaccountid</para>
            /// </summary>
            public const string ParentAccount = "parentaccountid";

            /// <summary>
            /// <para>Logical Name = parentaccountidname</para>
            /// </summary>
            public const string ParentAccountIdName = "parentaccountidname";

            /// <summary>
            /// <para>Logical Name = parentaccountidyominame</para>
            /// </summary>
            public const string ParentAccountIdYomiName = "parentaccountidyominame";

            /// <summary>
            /// <para>Participates in Workflow</para>
            /// <para>Logical Name = participatesinworkflow</para>
            /// </summary>
            public const string ParticipatesInWorkflow = "participatesinworkflow";

            /// <summary>
            /// <para>Logical Name = participatesinworkflowname</para>
            /// </summary>
            public const string ParticipatesInWorkflowName = "participatesinworkflowname";

            /// <summary>
            /// <para>Password</para>
            /// <para>Logical Name = sbt_password</para>
            /// </summary>
            public const string Password = "sbt_password";

            /// <summary>
            /// <para>Payment Terms</para>
            /// <para>Logical Name = paymenttermscode</para>
            /// </summary>
            public const string PaymentTerms = "paymenttermscode";

            /// <summary>
            /// <para>Logical Name = paymenttermscodename</para>
            /// </summary>
            public const string PaymentTermsCodeName = "paymenttermscodename";

            /// <summary>
            /// <para>Performance Status</para>
            /// <para>Logical Name = sbt_performancestatus</para>
            /// </summary>
            public const string PerformanceStatus = "sbt_performancestatus";

            /// <summary>
            /// <para>Plan Allocation via Inventory Settings</para>
            /// <para>Logical Name = sbt_planallocationinventory</para>
            /// </summary>
            public const string PlanAllocationViaInventorySettings = "sbt_planallocationinventory";

            /// <summary>
            /// <para>Preferred Day</para>
            /// <para>Logical Name = preferredappointmentdaycode</para>
            /// </summary>
            public const string PreferredDay = "preferredappointmentdaycode";

            /// <summary>
            /// <para>Preferred Facility/Equipment</para>
            /// <para>Logical Name = preferredequipmentid</para>
            /// </summary>
            public const string PreferredFacility_Equipment = "preferredequipmentid";

            /// <summary>
            /// <para>Preferred Method of Contact</para>
            /// <para>Logical Name = preferredcontactmethodcode</para>
            /// </summary>
            public const string PreferredMethodOfContact = "preferredcontactmethodcode";

            /// <summary>
            /// <para>Preferred Service</para>
            /// <para>Logical Name = preferredserviceid</para>
            /// </summary>
            public const string PreferredService = "preferredserviceid";

            /// <summary>
            /// <para>Preferred Time</para>
            /// <para>Logical Name = preferredappointmenttimecode</para>
            /// </summary>
            public const string PreferredTime = "preferredappointmenttimecode";

            /// <summary>
            /// <para>Preferred User</para>
            /// <para>Logical Name = preferredsystemuserid</para>
            /// </summary>
            public const string PreferredUser = "preferredsystemuserid";

            /// <summary>
            /// <para>Logical Name = preferredappointmentdaycodename</para>
            /// </summary>
            public const string PreferredAppointmentDayCodeName = "preferredappointmentdaycodename";

            /// <summary>
            /// <para>Logical Name = preferredappointmenttimecodename</para>
            /// </summary>
            public const string PreferredAppointmentTimeCodeName = "preferredappointmenttimecodename";

            /// <summary>
            /// <para>Logical Name = preferredcontactmethodcodename</para>
            /// </summary>
            public const string PreferredContactMethodCodeName = "preferredcontactmethodcodename";

            /// <summary>
            /// <para>Logical Name = preferredequipmentidname</para>
            /// </summary>
            public const string PreferredEquipmentIdName = "preferredequipmentidname";

            /// <summary>
            /// <para>Logical Name = preferredserviceidname</para>
            /// </summary>
            public const string PreferredServiceIdName = "preferredserviceidname";

            /// <summary>
            /// <para>Logical Name = preferredsystemuseridname</para>
            /// </summary>
            public const string PreferredSystemUserIdName = "preferredsystemuseridname";

            /// <summary>
            /// <para>Logical Name = preferredsystemuseridyominame</para>
            /// </summary>
            public const string PreferredSystemUserIdYomiName = "preferredsystemuseridyominame";

            /// <summary>
            /// <para>Previous Performance Rate</para>
            /// <para>Logical Name = sbt_previousperformancerate</para>
            /// </summary>
            public const string PreviousPerformanceRate = "sbt_previousperformancerate";

            /// <summary>
            /// <para>Price List</para>
            /// <para>Logical Name = defaultpricelevelid</para>
            /// </summary>
            public const string PriceList = "defaultpricelevelid";

            /// <summary>
            /// <para>Primary Contact</para>
            /// <para>Logical Name = primarycontactid</para>
            /// </summary>
            public const string PrimaryContact = "primarycontactid";

            /// <summary>
            /// <para>Primary Satori ID</para>
            /// <para>Logical Name = primarysatoriid</para>
            /// </summary>
            public const string PrimarySatoriID = "primarysatoriid";

            /// <summary>
            /// <para>Primary Twitter ID</para>
            /// <para>Logical Name = primarytwitterid</para>
            /// </summary>
            public const string PrimaryTwitterID = "primarytwitterid";

            /// <summary>
            /// <para>Logical Name = primarycontactidname</para>
            /// </summary>
            public const string PrimaryContactIdName = "primarycontactidname";

            /// <summary>
            /// <para>Logical Name = primarycontactidyominame</para>
            /// </summary>
            public const string PrimaryContactIdYomiName = "primarycontactidyominame";

            /// <summary>
            /// <para>Process</para>
            /// <para>Logical Name = processid</para>
            /// </summary>
            public const string Process = "processid";

            /// <summary>
            /// <para>Process Stage</para>
            /// <para>Logical Name = stageid</para>
            /// </summary>
            public const string ProcessStage = "stageid";

            /// <summary>
            /// <para>Profile Type</para>
            /// <para>Logical Name = sbt_profiletype</para>
            /// </summary>
            public const string ProfileType = "sbt_profiletype";

            /// <summary>
            /// <para>Re-Contract Due</para>
            /// <para>Logical Name = sbt_recontractdue</para>
            /// </summary>
            public const string Re_ContractDue = "sbt_recontractdue";

            /// <summary>
            /// <para>Record Created On</para>
            /// <para>Logical Name = overriddencreatedon</para>
            /// </summary>
            public const string RecordCreatedOn = "overriddencreatedon";

            /// <summary>
            /// <para>Relationship Type</para>
            /// <para>Logical Name = customertypecode</para>
            /// </summary>
            public const string RelationshipType = "customertypecode";

            /// <summary>
            /// <para>Logical Name = sbt_accountstatusname</para>
            /// </summary>
            public const string Sbt_accountstatusName = "sbt_accountstatusname";

            /// <summary>
            /// <para>Logical Name = sbt_accounttypename</para>
            /// </summary>
            public const string Sbt_accounttypeName = "sbt_accounttypename";

            /// <summary>
            /// <para>Logical Name = sbt_applygstname</para>
            /// </summary>
            public const string Sbt_applygstName = "sbt_applygstname";

            /// <summary>
            /// <para>Logical Name = sbt_autosendname</para>
            /// </summary>
            public const string Sbt_autosendName = "sbt_autosendname";

            /// <summary>
            /// <para>Logical Name = sbt_billingenablename</para>
            /// </summary>
            public const string Sbt_billingenableName = "sbt_billingenablename";

            /// <summary>
            /// <para>Logical Name = sbt_catchallenablename</para>
            /// </summary>
            public const string Sbt_catchallenableName = "sbt_catchallenablename";

            /// <summary>
            /// <para>Logical Name = sbt_chargetypename</para>
            /// </summary>
            public const string Sbt_chargetypeName = "sbt_chargetypename";

            /// <summary>
            /// <para>Logical Name = sbt_companysizename</para>
            /// </summary>
            public const string Sbt_companysizeName = "sbt_companysizename";

            /// <summary>
            /// <para>Logical Name = sbt_connectivitytocustomerpremisesname</para>
            /// </summary>
            public const string Sbt_connectivitytocustomerpremisesName = "sbt_connectivitytocustomerpremisesname";

            /// <summary>
            /// <para>Logical Name = sbt_cp_fixedlineservicesname</para>
            /// </summary>
            public const string Sbt_cp_fixedlineservicesName = "sbt_cp_fixedlineservicesname";

            /// <summary>
            /// <para>Logical Name = sbt_cp_internetname</para>
            /// </summary>
            public const string Sbt_cp_internetName = "sbt_cp_internetname";

            /// <summary>
            /// <para>Logical Name = sbt_cp_ipsecname</para>
            /// </summary>
            public const string Sbt_cp_ipsecName = "sbt_cp_ipsecname";

            /// <summary>
            /// <para>Logical Name = sbt_defaultplanname</para>
            /// </summary>
            public const string Sbt_DefaultPlanName = "sbt_defaultplanname";

            /// <summary>
            /// <para>Logical Name = sbt_istestaccountname</para>
            /// </summary>
            public const string Sbt_istestaccountName = "sbt_istestaccountname";

            /// <summary>
            /// <para>Logical Name = sbt_performancestatusname</para>
            /// </summary>
            public const string Sbt_performancestatusName = "sbt_performancestatusname";

            /// <summary>
            /// <para>Logical Name = sbt_planallocationinventoryname</para>
            /// </summary>
            public const string Sbt_planallocationinventoryName = "sbt_planallocationinventoryname";

            /// <summary>
            /// <para>Logical Name = sbt_profiletypename</para>
            /// </summary>
            public const string Sbt_profiletypeName = "sbt_profiletypename";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport1name</para>
            /// </summary>
            public const string Sbt_sendreport1Name = "sbt_sendreport1name";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport2name</para>
            /// </summary>
            public const string Sbt_sendreport2Name = "sbt_sendreport2name";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport3name</para>
            /// </summary>
            public const string Sbt_sendreport3Name = "sbt_sendreport3name";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport4name</para>
            /// </summary>
            public const string Sbt_sendreport4Name = "sbt_sendreport4name";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport5name</para>
            /// </summary>
            public const string Sbt_sendreport5Name = "sbt_sendreport5name";

            /// <summary>
            /// <para>Logical Name = sbt_sendreport6name</para>
            /// </summary>
            public const string Sbt_sendreport6Name = "sbt_sendreport6name";

            /// <summary>
            /// <para>Logical Name = sbt_ss_apiname</para>
            /// </summary>
            public const string Sbt_ss_apiName = "sbt_ss_apiname";

            /// <summary>
            /// <para>Logical Name = sbt_ss_dataname</para>
            /// </summary>
            public const string Sbt_ss_dataName = "sbt_ss_dataname";

            /// <summary>
            /// <para>Logical Name = sbt_ss_guiname</para>
            /// </summary>
            public const string Sbt_ss_guiName = "sbt_ss_guiname";

            /// <summary>
            /// <para>Logical Name = sbt_ss_smsname</para>
            /// </summary>
            public const string Sbt_ss_smsName = "sbt_ss_smsname";

            /// <summary>
            /// <para>Logical Name = sbt_ss_voicename</para>
            /// </summary>
            public const string Sbt_ss_voiceName = "sbt_ss_voicename";

            /// <summary>
            /// <para>Logical Name = sbt_subscribedservicesname</para>
            /// </summary>
            public const string Sbt_subscribedservicesName = "sbt_subscribedservicesname";

            /// <summary>
            /// <para>Logical Name = sbt_typename</para>
            /// </summary>
            public const string Sbt_typeName = "sbt_typename";

            /// <summary>
            /// <para>Send Marketing Materials</para>
            /// <para>Logical Name = donotsendmm</para>
            /// </summary>
            public const string SendMarketingMaterials = "donotsendmm";

            /// <summary>
            /// <para>Send Report 6</para>
            /// <para>Logical Name = sbt_sendreport6</para>
            /// </summary>
            public const string SendReport6 = "sbt_sendreport6";

            /// <summary>
            /// <para>Shares Outstanding</para>
            /// <para>Logical Name = sharesoutstanding</para>
            /// </summary>
            public const string SharesOutstanding = "sharesoutstanding";

            /// <summary>
            /// <para>Shipping Method</para>
            /// <para>Logical Name = shippingmethodcode</para>
            /// </summary>
            public const string ShippingMethod = "shippingmethodcode";

            /// <summary>
            /// <para>Logical Name = shippingmethodcodename</para>
            /// </summary>
            public const string ShippingMethodCodeName = "shippingmethodcodename";

            /// <summary>
            /// <para>SIC Code</para>
            /// <para>Logical Name = sic</para>
            /// </summary>
            public const string SICCode = "sic";

            /// <summary>
            /// <para>SIM Forecast Template</para>
            /// <para>Logical Name = sbt_simforecasttemplate</para>
            /// </summary>
            public const string SIMForecastTemplate = "sbt_simforecasttemplate";

            /// <summary>
            /// <para>SLA</para>
            /// <para>Logical Name = slaid</para>
            /// </summary>
            public const string SLA = "slaid";

            /// <summary>
            /// <para>Logical Name = slainvokedidname</para>
            /// </summary>
            public const string SLAInvokedIdName = "slainvokedidname";

            /// <summary>
            /// <para>Logical Name = slaname</para>
            /// </summary>
            public const string SLAName = "slaname";

            /// <summary>
            /// <para>SMS</para>
            /// <para>Logical Name = sbt_ss_sms</para>
            /// </summary>
            public const string SMS = "sbt_ss_sms";

            /// <summary>
            /// <para>Logical Name = statecodename</para>
            /// </summary>
            public const string StateCodeName = "statecodename";

            /// <summary>
            /// <para>Status</para>
            /// <para>Logical Name = statecode</para>
            /// </summary>
            public const string Status = "statecode";

            /// <summary>
            /// <para>Status Reason</para>
            /// <para>Logical Name = statuscode</para>
            /// </summary>
            public const string StatusReason = "statuscode";

            /// <summary>
            /// <para>Logical Name = statuscodename</para>
            /// </summary>
            public const string StatusCodeName = "statuscodename";

            /// <summary>
            /// <para>Stock Exchange</para>
            /// <para>Logical Name = stockexchange</para>
            /// </summary>
            public const string StockExchange = "stockexchange";

            /// <summary>
            /// <para>Subscribed Services</para>
            /// <para>Logical Name = sbt_subscribedservices</para>
            /// </summary>
            public const string SubscribedServices = "sbt_subscribedservices";

            /// <summary>
            /// <para>Subscribed Services Value</para>
            /// <para>Logical Name = sbt_subscribedservicesvalue</para>
            /// </summary>
            public const string SubscribedServicesValue = "sbt_subscribedservicesvalue";

            /// <summary>
            /// <para>Tax</para>
            /// <para>Logical Name = sbt_tax</para>
            /// </summary>
            public const string Tax = "sbt_tax";

            /// <summary>
            /// <para>Telephone 3</para>
            /// <para>Logical Name = telephone3</para>
            /// </summary>
            public const string Telephone3 = "telephone3";

            /// <summary>
            /// <para>Territory</para>
            /// <para>Logical Name = territoryid</para>
            /// </summary>
            public const string Territory = "territoryid";

            /// <summary>
            /// <para>Territory Code</para>
            /// <para>Logical Name = territorycode</para>
            /// </summary>
            public const string TerritoryCode = "territorycode";

            /// <summary>
            /// <para>Logical Name = territorycodename</para>
            /// </summary>
            public const string TerritoryCodeName = "territorycodename";

            /// <summary>
            /// <para>Logical Name = territoryidname</para>
            /// </summary>
            public const string TerritoryIdName = "territoryidname";

            /// <summary>
            /// <para>Ticker Symbol</para>
            /// <para>Logical Name = tickersymbol</para>
            /// </summary>
            public const string TickerSymbol = "tickersymbol";

            /// <summary>
            /// <para>Time Spent by me</para>
            /// <para>Logical Name = timespentbymeonemailandmeetings</para>
            /// </summary>
            public const string TimeSpentByMe = "timespentbymeonemailandmeetings";

            /// <summary>
            /// <para>Time Zone Rule Version Number</para>
            /// <para>Logical Name = timezoneruleversionnumber</para>
            /// </summary>
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";

            /// <summary>
            /// <para>Total Inventory Items</para>
            /// <para>Logical Name = sbt_totalinventoryitems</para>
            /// </summary>
            public const string TotalInventoryItems = "sbt_totalinventoryitems";

            /// <summary>
            /// <para>Total Payable</para>
            /// <para>Logical Name = sbt_totalpayable</para>
            /// </summary>
            public const string TotalPayable = "sbt_totalpayable";

            /// <summary>
            /// <para>Total Payable (Base)</para>
            /// <para>Logical Name = sbt_totalpayable_base</para>
            /// </summary>
            public const string TotalPayable_Base = "sbt_totalpayable_base";

            /// <summary>
            /// <para>Trading Name</para>
            /// <para>Logical Name = sbt_tradingname</para>
            /// </summary>
            public const string TradingName = "sbt_tradingname";

            /// <summary>
            /// <para>Logical Name = transactioncurrencyidname</para>
            /// </summary>
            public const string TransactionCurrencyIdName = "transactioncurrencyidname";

            /// <summary>
            /// <para>Traversed Path</para>
            /// <para>Logical Name = traversedpath</para>
            /// </summary>
            public const string TraversedPath = "traversedpath";

            /// <summary>
            /// <para>Type</para>
            /// <para>Logical Name = sbt_type</para>
            /// </summary>
            public const string Type = "sbt_type";

            /// <summary>
            /// <para>UTC Conversion Time Zone Code</para>
            /// <para>Logical Name = utcconversiontimezonecode</para>
            /// </summary>
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";

            /// <summary>
            /// <para>Version Number</para>
            /// <para>Logical Name = versionnumber</para>
            /// </summary>
            public const string VersionNumber = "versionnumber";

            /// <summary>
            /// <para>Voice</para>
            /// <para>Logical Name = sbt_ss_voice</para>
            /// </summary>
            public const string Voice = "sbt_ss_voice";

            /// <summary>
            /// <para>Website</para>
            /// <para>Logical Name = websiteurl</para>
            /// </summary>
            public const string Website = "websiteurl";

            /// <summary>
            /// <para>Whitelisted API IP</para>
            /// <para>Logical Name = sbt_whitelistapiip</para>
            /// </summary>
            public const string WhitelistedAPIIP = "sbt_whitelistapiip";

            /// <summary>
            /// <para>Whitelisted GUI IP</para>
            /// <para>Logical Name = sbt_whitelistedguiip</para>
            /// </summary>
            public const string WhitelistedGUIIP = "sbt_whitelistedguiip";

            /// <summary>
            /// <para>Yomi Account Name</para>
            /// <para>Logical Name = yominame</para>
            /// </summary>
            public const string YomiAccountName = "yominame";

        }

    }
}
